------------------------
security/provenance/fs.c
------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/fs.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#32: FILE: security/provenance/fs.c:32:
+#define declare_file_operations(ops_name, write_op, read_op)    static const struct file_operations ops_name = { \

WARNING:LONG_LINE: line over 80 characters
#33: FILE: security/provenance/fs.c:33:
+		.write = write_op,										 \

WARNING:LONG_LINE: line over 80 characters
#34: FILE: security/provenance/fs.c:34:
+		.read = read_op,										 \

WARNING:LONG_LINE: line over 80 characters
#35: FILE: security/provenance/fs.c:35:
+		.llseek = generic_file_llseek,									 \

WARNING:LONG_LINE: line over 80 characters
#38: FILE: security/provenance/fs.c:38:
+static ssize_t no_read(struct file *filp, char __user *buf, size_t count, loff_t *ppos)

WARNING:LONG_LINE: line over 80 characters
#82: FILE: security/provenance/fs.c:82:
+#define declare_write_flag_fcn(fcn_name, flag)          static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#82: FILE: security/provenance/fs.c:82:
+#define declare_write_flag_fcn(fcn_name, flag)          static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																	       \
+		return __write_flag(file, buf, count, ppos, &flag);										       \
+	}

WARNING:LONG_LINE: line over 80 characters
#83: FILE: security/provenance/fs.c:83:
+	{																	       \

WARNING:LONG_LINE: line over 80 characters
#84: FILE: security/provenance/fs.c:84:
+		return __write_flag(file, buf, count, ppos, &flag);										       \

WARNING:LONG_LINE: line over 80 characters
#86: FILE: security/provenance/fs.c:86:
+#define declare_read_flag_fcn(fcn_name, flag)           static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#86: FILE: security/provenance/fs.c:86:
+#define declare_read_flag_fcn(fcn_name, flag)           static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																	 \
+		return __read_flag(filp, buf, count, ppos, flag);										 \
+	}

WARNING:LONG_LINE: line over 80 characters
#87: FILE: security/provenance/fs.c:87:
+	{																	 \

WARNING:LONG_LINE: line over 80 characters
#88: FILE: security/provenance/fs.c:88:
+		return __read_flag(filp, buf, count, ppos, flag);										 \

WARNING:LONG_LINE: line over 80 characters
#102: FILE: security/provenance/fs.c:102:
+declare_write_flag_fcn(prov_write_compress_node, prov_policy.should_compress_node);

WARNING:LONG_LINE: line over 80 characters
#103: FILE: security/provenance/fs.c:103:
+declare_read_flag_fcn(prov_read_compress_node, prov_policy.should_compress_node);

WARNING:LONG_LINE: line over 80 characters
#104: FILE: security/provenance/fs.c:104:
+declare_file_operations(prov_compress_node_ops, prov_write_compress_node, prov_read_compress_node);

WARNING:LONG_LINE: line over 80 characters
#106: FILE: security/provenance/fs.c:106:
+declare_write_flag_fcn(prov_write_compress_edge, prov_policy.should_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#107: FILE: security/provenance/fs.c:107:
+declare_read_flag_fcn(prov_read_compress_edge, prov_policy.should_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#108: FILE: security/provenance/fs.c:108:
+declare_file_operations(prov_compress_edge_ops, prov_write_compress_edge, prov_read_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#112: FILE: security/provenance/fs.c:112:
+declare_file_operations(prov_duplicate_ops, prov_write_duplicate, prov_read_duplicate);

WARNING:LONG_LINE: line over 80 characters
#148: FILE: security/provenance/fs.c:148:
+declare_file_operations(prov_machine_id_ops, prov_write_machine_id, prov_read_machine_id);

WARNING:LONG_LINE: line over 80 characters
#184: FILE: security/provenance/fs.c:184:
+declare_file_operations(prov_boot_id_ops, prov_write_boot_id, prov_read_boot_id);

WARNING:LONG_LINE: line over 80 characters
#204: FILE: security/provenance/fs.c:204:
+	if (prov_type(node) == ENT_DISC || prov_type(node) == ACT_DISC || prov_type(node) == AGT_DISC) {

WARNING:LONG_LINE: line over 80 characters
#208: FILE: security/provenance/fs.c:208:
+		__memcpy_ss(&node->disc_node_info.parent, sizeof(union prov_identifier), &prov_elt(tprov)->node_info.identifier, sizeof(union prov_identifier));

WARNING:LONG_LINE: line over 80 characters
#245: FILE: security/provenance/fs.c:245:
+static inline void update_prov_config(union prov_elt *setting, uint8_t op, struct provenance *prov)

WARNING:LONG_LINE: line over 80 characters
#269: FILE: security/provenance/fs.c:269:
+		prov_bloom_merge(prov_taint(prov_elt(prov)), prov_taint(setting));

WARNING:LONG_LINE: line over 80 characters
#351: FILE: security/provenance/fs.c:351:
+#define declare_write_filter_fcn(fcn_name, filter)      static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#351: FILE: security/provenance/fs.c:351:
+#define declare_write_filter_fcn(fcn_name, filter)      static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																	       \
+		return __write_filter(file, buf, count, &filter);										       \
+	}

WARNING:LONG_LINE: line over 80 characters
#352: FILE: security/provenance/fs.c:352:
+	{																	       \

WARNING:LONG_LINE: line over 80 characters
#353: FILE: security/provenance/fs.c:353:
+		return __write_filter(file, buf, count, &filter);										       \

WARNING:LONG_LINE: line over 80 characters
#355: FILE: security/provenance/fs.c:355:
+#define declare_reader_filter_fcn(fcn_name, filter)     static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#355: FILE: security/provenance/fs.c:355:
+#define declare_reader_filter_fcn(fcn_name, filter)     static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																	 \
+		return __read_filter(filp, buf, count, filter);											 \
+	}

WARNING:LONG_LINE: line over 80 characters
#356: FILE: security/provenance/fs.c:356:
+	{																	 \

WARNING:LONG_LINE: line over 80 characters
#357: FILE: security/provenance/fs.c:357:
+		return __read_filter(filp, buf, count, filter);											 \

WARNING:LONG_LINE: line over 80 characters
#362: FILE: security/provenance/fs.c:362:
+declare_file_operations(prov_node_filter_ops, prov_write_node_filter, prov_read_node_filter);

WARNING:LONG_LINE: line over 80 characters
#364: FILE: security/provenance/fs.c:364:
+declare_write_filter_fcn(prov_write_derived_filter, prov_policy.prov_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#365: FILE: security/provenance/fs.c:365:
+declare_reader_filter_fcn(prov_read_derived_filter, prov_policy.prov_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#366: FILE: security/provenance/fs.c:366:
+declare_file_operations(prov_derived_filter_ops, prov_write_derived_filter, prov_read_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#368: FILE: security/provenance/fs.c:368:
+declare_write_filter_fcn(prov_write_generated_filter, prov_policy.prov_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#369: FILE: security/provenance/fs.c:369:
+declare_reader_filter_fcn(prov_read_generated_filter, prov_policy.prov_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#370: FILE: security/provenance/fs.c:370:
+declare_file_operations(prov_generated_filter_ops, prov_write_generated_filter, prov_read_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#374: FILE: security/provenance/fs.c:374:
+declare_file_operations(prov_used_filter_ops, prov_write_used_filter, prov_read_used_filter);

WARNING:LONG_LINE: line over 80 characters
#376: FILE: security/provenance/fs.c:376:
+declare_write_filter_fcn(prov_write_informed_filter, prov_policy.prov_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#377: FILE: security/provenance/fs.c:377:
+declare_reader_filter_fcn(prov_read_informed_filter, prov_policy.prov_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#378: FILE: security/provenance/fs.c:378:
+declare_file_operations(prov_informed_filter_ops, prov_write_informed_filter, prov_read_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#380: FILE: security/provenance/fs.c:380:
+declare_write_filter_fcn(prov_write_propagate_node_filter, prov_policy.prov_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#381: FILE: security/provenance/fs.c:381:
+declare_reader_filter_fcn(prov_read_propagate_node_filter, prov_policy.prov_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#382: FILE: security/provenance/fs.c:382:
+declare_file_operations(prov_propagate_node_filter_ops, prov_write_propagate_node_filter, prov_read_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#384: FILE: security/provenance/fs.c:384:
+declare_write_filter_fcn(prov_write_propagate_derived_filter, prov_policy.prov_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#385: FILE: security/provenance/fs.c:385:
+declare_reader_filter_fcn(prov_read_propagate_derived_filter, prov_policy.prov_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#386: FILE: security/provenance/fs.c:386:
+declare_file_operations(prov_propagate_derived_filter_ops, prov_write_propagate_derived_filter, prov_read_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#388: FILE: security/provenance/fs.c:388:
+declare_write_filter_fcn(prov_write_propagate_generated_filter, prov_policy.prov_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#389: FILE: security/provenance/fs.c:389:
+declare_reader_filter_fcn(prov_read_propagate_generated_filter, prov_policy.prov_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#390: FILE: security/provenance/fs.c:390:
+declare_file_operations(prov_propagate_generated_filter_ops, prov_write_propagate_generated_filter, prov_read_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#392: FILE: security/provenance/fs.c:392:
+declare_write_filter_fcn(prov_write_propagate_used_filter, prov_policy.prov_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#393: FILE: security/provenance/fs.c:393:
+declare_reader_filter_fcn(prov_read_propagate_used_filter, prov_policy.prov_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#394: FILE: security/provenance/fs.c:394:
+declare_file_operations(prov_propagate_used_filter_ops, prov_write_propagate_used_filter, prov_read_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#396: FILE: security/provenance/fs.c:396:
+declare_write_filter_fcn(prov_write_propagate_informed_filter, prov_policy.prov_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#397: FILE: security/provenance/fs.c:397:
+declare_reader_filter_fcn(prov_read_propagate_informed_filter, prov_policy.prov_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#398: FILE: security/provenance/fs.c:398:
+declare_file_operations(prov_propagate_informed_filter_ops, prov_write_propagate_informed_filter, prov_read_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#456: FILE: security/provenance/fs.c:456:
+	__memcpy_ss(&msg->prov, sizeof(union prov_elt), prov_elt(prov), sizeof(union prov_elt));

WARNING:LONG_LINE: line over 80 characters
#465: FILE: security/provenance/fs.c:465:
+declare_file_operations(prov_process_ops, prov_write_process, prov_read_process);

WARNING:LONG_LINE: line over 80 characters
#479: FILE: security/provenance/fs.c:479:
+	if (copy_from_user(&(f->filter), buf, sizeof(struct prov_ipv4_filter))) {

WARNING:LONG_LINE: line over 80 characters
#507: FILE: security/provenance/fs.c:507:
+		if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct prov_ipv4_filter)))

WARNING:LONG_LINE: line over 80 characters
#515: FILE: security/provenance/fs.c:515:
+#define declare_write_ipv4_filter_fcn(fcn_name, filter)         static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#515: FILE: security/provenance/fs.c:515:
+#define declare_write_ipv4_filter_fcn(fcn_name, filter)         static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																		       \
+		return __write_ipv4_filter(file, buf, count, &filter);											       \
+	}

WARNING:LONG_LINE: line over 80 characters
#516: FILE: security/provenance/fs.c:516:
+	{																		       \

WARNING:LONG_LINE: line over 80 characters
#517: FILE: security/provenance/fs.c:517:
+		return __write_ipv4_filter(file, buf, count, &filter);											       \

WARNING:LONG_LINE: line over 80 characters
#519: FILE: security/provenance/fs.c:519:
+#define declare_reader_ipv4_filter_fcn(fcn_name, filter)        static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#519: FILE: security/provenance/fs.c:519:
+#define declare_reader_ipv4_filter_fcn(fcn_name, filter)        static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																		 \
+		return __read_ipv4_filter(filp, buf, count, &filter);											 \
+	}

WARNING:LONG_LINE: line over 80 characters
#520: FILE: security/provenance/fs.c:520:
+	{																		 \

WARNING:LONG_LINE: line over 80 characters
#521: FILE: security/provenance/fs.c:521:
+		return __read_ipv4_filter(filp, buf, count, &filter);											 \

WARNING:LONG_LINE: line over 80 characters
#524: FILE: security/provenance/fs.c:524:
+declare_write_ipv4_filter_fcn(prov_write_ipv4_ingress_filter, ingress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#525: FILE: security/provenance/fs.c:525:
+declare_reader_ipv4_filter_fcn(prov_read_ipv4_ingress_filter, ingress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#526: FILE: security/provenance/fs.c:526:
+declare_file_operations(prov_ipv4_ingress_filter_ops, prov_write_ipv4_ingress_filter, prov_read_ipv4_ingress_filter);

WARNING:LONG_LINE: line over 80 characters
#528: FILE: security/provenance/fs.c:528:
+declare_write_ipv4_filter_fcn(prov_write_ipv4_egress_filter, egress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#529: FILE: security/provenance/fs.c:529:
+declare_reader_ipv4_filter_fcn(prov_read_ipv4_egress_filter, egress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#530: FILE: security/provenance/fs.c:530:
+declare_file_operations(prov_ipv4_egress_filter_ops, prov_write_ipv4_egress_filter, prov_read_ipv4_egress_filter);

WARNING:LONG_LINE: line over 80 characters
#568: FILE: security/provenance/fs.c:568:
+#define declare_generic_filter_write(function_name, filters, info, add_function, delete_function)	    \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#568: FILE: security/provenance/fs.c:568:
+#define declare_generic_filter_write(function_name, filters, info, add_function, delete_function)	    \
+	static ssize_t function_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{												    \
+		struct filters *s;									    \
+		if (count < sizeof(struct info)) {							    \
+			return -ENOMEM; }								    \
+		s = kzalloc(sizeof(struct filters), GFP_KERNEL);					    \
+		if (!s) {										    \
+			return -ENOMEM; }								    \
+		if (copy_from_user(&s->filter, buf, sizeof(struct info))) {				    \
+			kfree(s);									    \
+			return -EAGAIN;									    \
+		}											    \
+		if ((s->filter.op & PROV_SET_DELETE) != PROV_SET_DELETE) {				    \
+			add_function(s); }								    \
+		else {											    \
+			delete_function(s); }								    \
+		return sizeof(struct filters);								    \
+	}

WARNING:LONG_LINE: line over 80 characters
#569: FILE: security/provenance/fs.c:569:
+	static ssize_t function_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:LONG_LINE: line over 80 characters
#570: FILE: security/provenance/fs.c:570:
+	{												    \

WARNING:LONG_LINE: line over 80 characters
#571: FILE: security/provenance/fs.c:571:
+		struct filters *s;									    \

WARNING:LONG_LINE: line over 80 characters
#572: FILE: security/provenance/fs.c:572:
+		if (count < sizeof(struct info)) {							    \

WARNING:LONG_LINE: line over 80 characters
#573: FILE: security/provenance/fs.c:573:
+			return -ENOMEM; }								    \

WARNING:LONG_LINE: line over 80 characters
#574: FILE: security/provenance/fs.c:574:
+		s = kzalloc(sizeof(struct filters), GFP_KERNEL);					    \

WARNING:LONG_LINE: line over 80 characters
#575: FILE: security/provenance/fs.c:575:
+		if (!s) {										    \

WARNING:LONG_LINE: line over 80 characters
#576: FILE: security/provenance/fs.c:576:
+			return -ENOMEM; }								    \

WARNING:LONG_LINE: line over 80 characters
#577: FILE: security/provenance/fs.c:577:
+		if (copy_from_user(&s->filter, buf, sizeof(struct info))) {				    \

WARNING:LONG_LINE: line over 80 characters
#578: FILE: security/provenance/fs.c:578:
+			kfree(s);									    \

WARNING:LONG_LINE: line over 80 characters
#579: FILE: security/provenance/fs.c:579:
+			return -EAGAIN;									    \

WARNING:LONG_LINE: line over 80 characters
#580: FILE: security/provenance/fs.c:580:
+		}											    \

WARNING:LONG_LINE: line over 80 characters
#581: FILE: security/provenance/fs.c:581:
+		if ((s->filter.op & PROV_SET_DELETE) != PROV_SET_DELETE) {				    \

WARNING:LONG_LINE: line over 80 characters
#582: FILE: security/provenance/fs.c:582:
+			add_function(s); }								    \

WARNING:LONG_LINE: line over 80 characters
#583: FILE: security/provenance/fs.c:583:
+		else {											    \

WARNING:LONG_LINE: line over 80 characters
#584: FILE: security/provenance/fs.c:584:
+			delete_function(s); }								    \

WARNING:LONG_LINE: line over 80 characters
#585: FILE: security/provenance/fs.c:585:
+		return sizeof(struct filters);								    \

WARNING:LONG_LINE: line over 80 characters
#588: FILE: security/provenance/fs.c:588:
+#define declare_generic_filter_read(function_name, filters, info)				      \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#588: FILE: security/provenance/fs.c:588:
+#define declare_generic_filter_read(function_name, filters, info)				      \
+	static ssize_t function_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{											      \
+		struct list_head *listentry, *listtmp;						      \
+		struct filters *tmp;								      \
+		size_t pos = 0;									      \
+		if (count < sizeof(struct info)) {						      \
+			return -ENOMEM; }							      \
+		list_for_each_safe(listentry, listtmp, &filters) {				      \
+			tmp = list_entry(listentry, struct filters, list);			      \
+			if (count < pos + sizeof(struct info)) {				      \
+				return -ENOMEM; }						      \
+			if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct info))) {	      \
+				return -EAGAIN; }						      \
+			pos += sizeof(struct info);						      \
+		}										      \
+		return pos;									      \
+	}

WARNING:LONG_LINE: line over 80 characters
#589: FILE: security/provenance/fs.c:589:
+	static ssize_t function_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:LONG_LINE: line over 80 characters
#590: FILE: security/provenance/fs.c:590:
+	{											      \

WARNING:LONG_LINE: line over 80 characters
#591: FILE: security/provenance/fs.c:591:
+		struct list_head *listentry, *listtmp;						      \

WARNING:LONG_LINE: line over 80 characters
#592: FILE: security/provenance/fs.c:592:
+		struct filters *tmp;								      \

WARNING:LONG_LINE: line over 80 characters
#593: FILE: security/provenance/fs.c:593:
+		size_t pos = 0;									      \

WARNING:LONG_LINE: line over 80 characters
#594: FILE: security/provenance/fs.c:594:
+		if (count < sizeof(struct info)) {						      \

WARNING:LONG_LINE: line over 80 characters
#595: FILE: security/provenance/fs.c:595:
+			return -ENOMEM; }							      \

WARNING:LONG_LINE: line over 80 characters
#596: FILE: security/provenance/fs.c:596:
+		list_for_each_safe(listentry, listtmp, &filters) {				      \

WARNING:LONG_LINE: line over 80 characters
#597: FILE: security/provenance/fs.c:597:
+			tmp = list_entry(listentry, struct filters, list);			      \

WARNING:LONG_LINE: line over 80 characters
#598: FILE: security/provenance/fs.c:598:
+			if (count < pos + sizeof(struct info)) {				      \

WARNING:LONG_LINE: line over 80 characters
#599: FILE: security/provenance/fs.c:599:
+				return -ENOMEM; }						      \

WARNING:LONG_LINE: line over 80 characters
#600: FILE: security/provenance/fs.c:600:
+			if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct info))) {	      \

WARNING:LONG_LINE: line over 80 characters
#601: FILE: security/provenance/fs.c:601:
+				return -EAGAIN; }						      \

WARNING:LONG_LINE: line over 80 characters
#602: FILE: security/provenance/fs.c:602:
+			pos += sizeof(struct info);						      \

WARNING:LONG_LINE: line over 80 characters
#603: FILE: security/provenance/fs.c:603:
+		}										      \

WARNING:LONG_LINE: line over 80 characters
#604: FILE: security/provenance/fs.c:604:
+		return pos;									      \

WARNING:LONG_LINE: line over 80 characters
#607: FILE: security/provenance/fs.c:607:
+static ssize_t prov_write_secctx_filter(struct file *file, const char __user *buf,

WARNING:LONG_LINE: line over 80 characters
#624: FILE: security/provenance/fs.c:624:
+	security_secctx_to_secid(s->filter.secctx, s->filter.len, &s->filter.secid);

WARNING:LONG_LINE: line over 80 characters
#633: FILE: security/provenance/fs.c:633:
+declare_file_operations(prov_secctx_filter_ops, prov_write_secctx_filter, prov_read_secctx_filter);

WARNING:LONG_LINE: line over 80 characters
#635: FILE: security/provenance/fs.c:635:
+declare_generic_filter_write(prov_write_uid_filter, user_filters, userinfo, prov_uid_add_or_update, prov_uid_delete);

WARNING:LONG_LINE: line over 80 characters
#637: FILE: security/provenance/fs.c:637:
+declare_file_operations(prov_uid_filter_ops, prov_write_uid_filter, prov_read_uid_filter);

WARNING:LONG_LINE: line over 80 characters
#639: FILE: security/provenance/fs.c:639:
+declare_generic_filter_write(prov_write_gid_filter, group_filters, groupinfo, prov_gid_add_or_update, prov_gid_delete);

WARNING:LONG_LINE: line over 80 characters
#641: FILE: security/provenance/fs.c:641:
+declare_file_operations(prov_gid_filter_ops, prov_write_gid_filter, prov_read_gid_filter);

WARNING:LONG_LINE: line over 80 characters
#681: FILE: security/provenance/fs.c:681:
+		if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct nsinfo)))

WARNING:LONG_LINE: line over 80 characters
#687: FILE: security/provenance/fs.c:687:
+declare_file_operations(prov_ns_filter_ops, prov_write_ns_filter, prov_read_ns_filter);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#690: FILE: security/provenance/fs.c:690:
+ * @brief This function records a relation between a provenance node and a user supplied data, which is a transient node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#692: FILE: security/provenance/fs.c:692:
+ * This function allows the user to attach an annotation node to a provenance node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#693: FILE: security/provenance/fs.c:693:
+ * The relation between the two nodes is RL_LOG and the node of the user-supplied log is of type ENT_STR.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#695: FILE: security/provenance/fs.c:695:
+ * Therefore, once we have recorded the node, we will free the memory allocated for it.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#699: FILE: security/provenance/fs.c:699:
+ * @return Number of bytes copied. -ENOMEM if no memory can be allocated for the transient long provenance node. -EAGAIN if copying from userspace failed. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#702: FILE: security/provenance/fs.c:702:
+static inline int record_log(union prov_elt *tprov, const char __user *buf, size_t count)

WARNING:LONG_LINE_COMMENT: line over 80 characters
#714: FILE: security/provenance/fs.c:714:
+	str->str_info.str[count] = '\0';        // Make sure the string is null terminated.

WARNING:LONG_LINE: line over 80 characters
#750: FILE: security/provenance/fs.c:750:
+#define hash_filters(filters, filters_type, tmp, tmp_type)						 \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#750: FILE: security/provenance/fs.c:750:
+#define hash_filters(filters, filters_type, tmp, tmp_type)						 \
+	do {												 \
+		list_for_each_safe(listentry, listtmp, &filters) {					 \
+			tmp = list_entry(listentry, struct filters_type, list);				 \
+			rc = crypto_shash_update(hashdesc, (u8 *)&tmp->filter, sizeof(struct tmp_type)); \
+			if (rc) {									 \
+				pr_err("Provenance: error updating hash.");				 \
+				pos = -EAGAIN;								 \
+				goto out;								 \
+			}										 \
+		}											 \
+	} while (0)

WARNING:LONG_LINE: line over 80 characters
#751: FILE: security/provenance/fs.c:751:
+	do {												 \

WARNING:LONG_LINE: line over 80 characters
#752: FILE: security/provenance/fs.c:752:
+		list_for_each_safe(listentry, listtmp, &filters) {					 \

WARNING:LONG_LINE: line over 80 characters
#753: FILE: security/provenance/fs.c:753:
+			tmp = list_entry(listentry, struct filters_type, list);				 \

WARNING:LONG_LINE: line over 80 characters
#754: FILE: security/provenance/fs.c:754:
+			rc = crypto_shash_update(hashdesc, (u8 *)&tmp->filter, sizeof(struct tmp_type)); \

WARNING:LONG_LINE: line over 80 characters
#755: FILE: security/provenance/fs.c:755:
+			if (rc) {									 \

WARNING:LONG_LINE: line over 80 characters
#756: FILE: security/provenance/fs.c:756:
+				pr_err("Provenance: error updating hash.");				 \

WARNING:LONG_LINE: line over 80 characters
#757: FILE: security/provenance/fs.c:757:
+				pos = -EAGAIN;								 \

WARNING:LONG_LINE: line over 80 characters
#758: FILE: security/provenance/fs.c:758:
+				goto out;								 \

WARNING:LONG_LINE: line over 80 characters
#759: FILE: security/provenance/fs.c:759:
+			}										 \

WARNING:LONG_LINE: line over 80 characters
#760: FILE: security/provenance/fs.c:760:
+		}											 \

WARNING:LONG_LINE: line over 80 characters
#787: FILE: security/provenance/fs.c:787:
+	size = sizeof(struct shash_desc) + crypto_shash_descsize(policy_shash_tfm);

WARNING:LONG_LINE: line over 80 characters
#805: FILE: security/provenance/fs.c:805:
+	rc = crypto_shash_update(hashdesc, (u8 *)CAMFLOW_VERSION_STR, strnlen(CAMFLOW_VERSION_STR, 32));

WARNING:LONG_LINE: line over 80 characters
#811: FILE: security/provenance/fs.c:811:
+	rc = crypto_shash_update(hashdesc, (u8 *)CAMFLOW_COMMIT, strnlen(CAMFLOW_COMMIT, PROV_COMMIT_MAX_LENGTH));

WARNING:LONG_LINE: line over 80 characters
#817: FILE: security/provenance/fs.c:817:
+	rc = crypto_shash_update(hashdesc, (u8 *)&prov_policy, sizeof(struct capture_policy));

WARNING:LONG_LINE: line over 80 characters
#823: FILE: security/provenance/fs.c:823:
+	hash_filters(ingress_ipv4filters, ipv4_filters, ipv4_tmp, prov_ipv4_filter);

WARNING:LONG_LINE: line over 80 characters
#825: FILE: security/provenance/fs.c:825:
+	hash_filters(egress_ipv4filters, ipv4_filters, ipv4_tmp, prov_ipv4_filter);

WARNING:LONG_LINE: line over 80 characters
#868: FILE: security/provenance/fs.c:868:
+			strlcpy(type_info->str, relation_str(type_info->id), PROV_TYPE_STR_MAX_LEN);

WARNING:LONG_LINE: line over 80 characters
#873: FILE: security/provenance/fs.c:873:
+			strlcpy(type_info->str, node_str(type_info->id), PROV_TYPE_STR_MAX_LEN);

WARNING:LONG_LINE: line over 80 characters
#938: FILE: security/provenance/fs.c:938:
+#define prov_create_file(name, perm, fun_ptr)					      \

WARNING:LONG_LINE: line over 80 characters
#939: FILE: security/provenance/fs.c:939:
+	do {									      \

WARNING:LONG_LINE: line over 80 characters
#940: FILE: security/provenance/fs.c:940:
+		dentry = securityfs_create_file(name, perm, prov_dir, NULL, fun_ptr); \

WARNING:LONG_LINE: line over 80 characters
#941: FILE: security/provenance/fs.c:941:
+		provenance_mark_as_opaque_dentry(dentry);			      \

WARNING:LONG_LINE: line over 80 characters
#967: FILE: security/provenance/fs.c:967:
+	prov_create_file("propagate_derived_filter", 0644, &prov_propagate_derived_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#968: FILE: security/provenance/fs.c:968:
+	prov_create_file("propagate_generated_filter", 0644, &prov_propagate_generated_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#969: FILE: security/provenance/fs.c:969:
+	prov_create_file("propagate_used_filter", 0644, &prov_propagate_used_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#970: FILE: security/provenance/fs.c:970:
+	prov_create_file("propagate_informed_filter", 0644, &prov_propagate_informed_filter_ops);

total: 0 errors, 160 warnings, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/fs.c has style problems, please review.
---------------------------
security/provenance/hooks.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/hooks.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#89: FILE: security/provenance/hooks.c:89:
+ * Record provenance relation RL_PROC_READ (by calling "uses_two" function) and RL_CLONE (by calling "informs" function).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#91: FILE: security/provenance/hooks.c:91:
+ * Since @cred is shared by all threads, we use @cred to save process's provenance,

WARNING:LONG_LINE: line over 80 characters
#115: FILE: security/provenance/hooks.c:115:
+				uses_two(RL_PROC_READ, cprov, tprov, NULL, clone_flags);

WARNING:LONG_LINE: line over 80 characters
#116: FILE: security/provenance/hooks.c:116:
+				informs(RL_CLONE, tprov, ntprov, NULL, clone_flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#126: FILE: security/provenance/hooks.c:126:
+ * Record provenance relation RL_TERMINATE_TASK by calling function "record_terminate".

WARNING:LONG_LINE_COMMENT: line over 80 characters
#144: FILE: security/provenance/hooks.c:144:
+ * We create a ENT_PROC provenance node, and set the UID and GID of the provenance node information from the current process's credential.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#145: FILE: security/provenance/hooks.c:145:
+ * Current process's cred struct's provenance pointer now points to the provenance node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#194: FILE: security/provenance/hooks.c:194:
+ * This hook is triggered when allocating sufficient memory and attaching to @cred such that cred_transfer() will not get ENOMEM.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#196: FILE: security/provenance/hooks.c:196:
+ * We simply create a ENT_PROC provenance node and associate the provenance entry to the newly allocated @cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#200: FILE: security/provenance/hooks.c:200:
+ * @return 0 if no error occurred; -ENOMEM if no memory can be allocated for the new provenance entry. Other error codes unknown.\

WARNING:LONG_LINE_COMMENT: line over 80 characters
#218: FILE: security/provenance/hooks.c:218:
+ * This hook is triggered when deallocating and clearing the cred->security field in a set of credentials.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#219: FILE: security/provenance/hooks.c:219:
+ * Record provenance relation RL_TERMINATE_PROC by calling "record_terminate" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#236: FILE: security/provenance/hooks.c:236:
+ * This hook is triggered when preparing a new set of credentials by copying the data from the old set.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#239: FILE: security/provenance/hooks.c:239:
+ * Information flows from old cred to the process that is preparing the new cred.

WARNING:LONG_LINE: line over 80 characters
#261: FILE: security/provenance/hooks.c:261:
+	spin_lock_irqsave_nested(prov_lock(old_prov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#263: FILE: security/provenance/hooks.c:263:
+		// Here we use current->provenance instead of calling get_task_provenance because at this point pid and vpid are not ready yet.

WARNING:LONG_LINE: line over 80 characters
#267: FILE: security/provenance/hooks.c:267:
+			rc = generates(RL_CLONE_MEM, old_prov, tprov, nprov, NULL, 0);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#277: FILE: security/provenance/hooks.c:277:
+ * This hook is triggered when transfering data from original creds to new creds.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#279: FILE: security/provenance/hooks.c:279:
+ * Information flow between cred's is captured when provenance_cred_prepare function is called.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#297: FILE: security/provenance/hooks.c:297:
+ * This hook is triggered when updating the module's state after setting one or more of the user

WARNING:LONG_LINE_COMMENT: line over 80 characters
#299: FILE: security/provenance/hooks.c:299:
+ * The @flags parameter indicates which of the set*uid system calls invoked this hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#302: FILE: security/provenance/hooks.c:302:
+ * Information flows from @old to current process and then eventually flows to @new (since modification should be made to @new instead of @current->cred).

WARNING:LONG_LINE: line over 80 characters
#319: FILE: security/provenance/hooks.c:319:
+	spin_lock_irqsave_nested(prov_lock(old_prov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#328: FILE: security/provenance/hooks.c:328:
+ * This hooks is triggered when checking permission before setting the process group identifier of the process @p to @pgid.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#329: FILE: security/provenance/hooks.c:329:
+ * @cprov is the cred provenance of the @current process, and @tprov is the task provenance of the @current process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#330: FILE: security/provenance/hooks.c:330:
+ * During "get_cred_provenance" and "get_task_provenance" functions, their provenances are updated too.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#331: FILE: security/provenance/hooks.c:331:
+ * We update process @p's cred provenance's pgid info as required by the trigger of the hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#333: FILE: security/provenance/hooks.c:333:
+ * Information flows from cred of the @current process, which sets the @pgid, to the current process, and eventually to the process @p whose @pgid is updated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#365: FILE: security/provenance/hooks.c:365:
+ * This hook is triggered when checking permission before sending signal @sig to @p.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#367: FILE: security/provenance/hooks.c:367:
+ * If @info is 1 or SI_FROMKERNEL(info) is true, then the signal should be viewed as coming from the kernel and should typically be permitted.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#368: FILE: security/provenance/hooks.c:368:
+ * SIGIO signals are handled separately by the send_sigiotask hook in file_security_ops.

WARNING:LONG_LINE: line over 80 characters
#377: FILE: security/provenance/hooks.c:377:
+static int provenance_task_kill(struct task_struct *p, struct kernel_siginfo *info,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#386: FILE: security/provenance/hooks.c:386:
+ * This hook is triggered when allocating and attaching a security structure to @inode->i_security.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#387: FILE: security/provenance/hooks.c:387:
+ * The i_security field is initialized to NULL when the inode structure is allocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#388: FILE: security/provenance/hooks.c:388:
+ * When i_security field is initialized, we also initialize i_provenance field of the inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#390: FILE: security/provenance/hooks.c:390:
+ * UUID information from @i_sb (superblock) is copied to the new inode's provenance entry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#391: FILE: security/provenance/hooks.c:391:
+ * We then call function "refresh_inode_provenance" to obtain more information about the inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#394: FILE: security/provenance/hooks.c:394:
+ * @return 0 if operation was successful; -ENOMEM if no memory can be allocated for the new inode provenance entry. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#406: FILE: security/provenance/hooks.c:406:
+	__memcpy_ss(prov_elt(iprov)->inode_info.sb_uuid, PROV_SBUUID_LEN, prov_elt(sprov)->sb_info.uuid, 16 * sizeof(uint8_t));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#414: FILE: security/provenance/hooks.c:414:
+ * This hook is triggered when deallocating the inode security structure and set @inode->i_security to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#434: FILE: security/provenance/hooks.c:434:
+ * Information flows from current process's cred's to the process, and eventually to the parent's inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#438: FILE: security/provenance/hooks.c:438:
+ * @return 0 if permission is granted; -ENOMEM if parent's inode's provenance entry is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#453: FILE: security/provenance/hooks.c:453:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#466: FILE: security/provenance/hooks.c:466:
+ * so a security module can use it to provide additional checking for existing Linux permission checks.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#467: FILE: security/provenance/hooks.c:467:
+ * Notice that this hook is called when a file is opened (as well as many other operations),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#468: FILE: security/provenance/hooks.c:468:
+ * whereas the file_security_ops permission hook is called when the actual read/write operations are performed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#472: FILE: security/provenance/hooks.c:472:
+ * 1. MAY_EXEC: record provenance relation RL_PERM_EXEC by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#473: FILE: security/provenance/hooks.c:473:
+ * 2. MAY_READ: record provenance relation MAY_READ by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#474: FILE: security/provenance/hooks.c:474:
+ * 3. MAY_APPEND: record provenance relation RL_PERM_APPEND by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#475: FILE: security/provenance/hooks.c:475:
+ * 4. MAY_WRITE: record provenance relation RL_PERM_WRITE by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#477: FILE: security/provenance/hooks.c:477:
+ * Information flows from @inode's provenance to the current process that attempts to access the inode, and eventually to the cred of the task.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#478: FILE: security/provenance/hooks.c:478:
+ * Provenance relation is not recorded if the inode to be access is private or if the inode's provenance entry does not exist.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#481: FILE: security/provenance/hooks.c:481:
+ * @return 0 if permission is granted; -ENOMEM if @inode's provenance does not exist. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#483: FILE: security/provenance/hooks.c:483:
+ * @todo We ignore inode that are PRIVATE (i.e., IS_PRIVATE is true). Private inodes are FS internals and we ignore for now.

WARNING:LONG_LINE: line over 80 characters
#504: FILE: security/provenance/hooks.c:504:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#535: FILE: security/provenance/hooks.c:535:
+ * This hook is triggered when checking permission before creating a new hard link to a file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#536: FILE: security/provenance/hooks.c:536:
+ * We obtain the provenance of current process and its cred, as well as provenance of inode or parent directory of new link.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#540: FILE: security/provenance/hooks.c:540:
+ * 1. From cred of the current process to the process, and eventually to the inode of parent directory of new link, and,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#541: FILE: security/provenance/hooks.c:541:
+ * 2. From cred of the current process to the process, and eventually to the dentry of the existing link to the file, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#542: FILE: security/provenance/hooks.c:542:
+ * 3. From the inode of parent directory of new link to the dentry of the existing link to the file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#546: FILE: security/provenance/hooks.c:546:
+ * @return 0 if permission is granted; -ENOMEM if either the dentry provenance of the existing link to the file or the inode provenance of the new parent directory of new link does not exist.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#548: FILE: security/provenance/hooks.c:548:
+ * @todo The information flow relations captured here is a bit weird. We need to double check the correctness.

WARNING:LONG_LINE: line over 80 characters
#565: FILE: security/provenance/hooks.c:565:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#592: FILE: security/provenance/hooks.c:592:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#603: FILE: security/provenance/hooks.c:603:
+ *	@dir contains the inode structure of parent directory of the symbolic link.

WARNING:LONG_LINE: line over 80 characters
#622: FILE: security/provenance/hooks.c:622:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#634: FILE: security/provenance/hooks.c:634:
+ * This hook is triggered when checking for permission to rename a file or directory.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#635: FILE: security/provenance/hooks.c:635:
+ * Information flow is the same as in the "provenance_inode_link" function so we call this function.

WARNING:LONG_LINE: line over 80 characters
#658: FILE: security/provenance/hooks.c:658:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#671: FILE: security/provenance/hooks.c:671:
+ * This hooks is triggered when checking permission before setting file attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#672: FILE: security/provenance/hooks.c:672:
+ * Note that the kernel call to notify_change is performed from several locations,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#673: FILE: security/provenance/hooks.c:673:
+ * whenever file attributes change (such as when a file is truncated, chown/chmod operations

WARNING:LONG_LINE_COMMENT: line over 80 characters
#675: FILE: security/provenance/hooks.c:675:
+ * We create a new provenance node ENT_IATTR, and update its information based on @iattr.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#678: FILE: security/provenance/hooks.c:678:
+ * Information flows from cred of the current process to the process, and eventually to the inode attribute to set the attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#679: FILE: security/provenance/hooks.c:679:
+ * Information also flows from inode attribute to the inode whose attributes are to be set.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#680: FILE: security/provenance/hooks.c:680:
+ * After relation is recorded, iattr provenance entry is freed (i.e., memory deallocated).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#684: FILE: security/provenance/hooks.c:684:
+ * @return 0 if permission is granted; -ENOMEM if inode provenance of the file is NULL; -ENOMEM if no memory can be allocated for a new ENT_IATTR provenance entry. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#712: FILE: security/provenance/hooks.c:712:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#729: FILE: security/provenance/hooks.c:729:
+ * This hook is triggered when checking permission before obtaining file attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#731: FILE: security/provenance/hooks.c:731:
+ * Information flows from the inode of the file to the calling process, and eventually to the process's cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#733: FILE: security/provenance/hooks.c:733:
+ * @return 0 if permission is granted; -ENOMEM if the provenance entry of the file is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#747: FILE: security/provenance/hooks.c:747:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#758: FILE: security/provenance/hooks.c:758:
+ * This hook is triggered when checking the permission to read the symbolic link.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#760: FILE: security/provenance/hooks.c:760:
+ * Information flows from the link file to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#762: FILE: security/provenance/hooks.c:762:
+ * @return 0 if permission is granted; -ENOMEM if the link file's provenance entry is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#776: FILE: security/provenance/hooks.c:776:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#787: FILE: security/provenance/hooks.c:787:
+ * The provenance extended attributes are set for an inode only if the @name of xattr is matched to be XATTR_NAME_PROVENANCE.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#793: FILE: security/provenance/hooks.c:793:
+ * @return 0 if no error occurred; -ENOMEM if size does not match. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#826: FILE: security/provenance/hooks.c:826:
+		prov_bloom_merge(prov_taint(prov_elt(prov)), prov_taint(setting));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#834: FILE: security/provenance/hooks.c:834:
+ * This hook is triggered when updating inode security field after successful setxattr operation.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#835: FILE: security/provenance/hooks.c:835:
+ * The relations are recorded through "record_write_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#838: FILE: security/provenance/hooks.c:838:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE: line over 80 characters
#863: FILE: security/provenance/hooks.c:863:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#865: FILE: security/provenance/hooks.c:865:
+	record_write_xattr(RL_SETXATTR, iprov, tprov, cprov, name, value, size, flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#874: FILE: security/provenance/hooks.c:874:
+ * This hook is triggered when checking permission before obtaining the extended attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#875: FILE: security/provenance/hooks.c:875:
+ * The relations are recorded through "record_read_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#877: FILE: security/provenance/hooks.c:877:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE_COMMENT: line over 80 characters
#881: FILE: security/provenance/hooks.c:881:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance is NULL; Other error codes inherited from "record_read_xattr" function or unknown.

WARNING:LONG_LINE: line over 80 characters
#897: FILE: security/provenance/hooks.c:897:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#908: FILE: security/provenance/hooks.c:908:
+ * This hook is triggered when checking permission before obtaining the list of extended attribute names for @dentry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#910: FILE: security/provenance/hooks.c:910:
+ * Information flows from inode (whose xattrs are of interests) to calling task process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#913: FILE: security/provenance/hooks.c:913:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance is NULL; Other error codes inherited from "uses" function or unknown.

WARNING:LONG_LINE: line over 80 characters
#926: FILE: security/provenance/hooks.c:926:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#937: FILE: security/provenance/hooks.c:937:
+ * This hook is triggered when checking permission before removing the extended attribute identified by @name for @dentry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#938: FILE: security/provenance/hooks.c:938:
+ * The relations are recorded through "record_write_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#941: FILE: security/provenance/hooks.c:941:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE: line over 80 characters
#961: FILE: security/provenance/hooks.c:961:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#963: FILE: security/provenance/hooks.c:963:
+	rc = record_write_xattr(RL_RMVXATTR, iprov, tprov, cprov, name, NULL, 0, 0);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#973: FILE: security/provenance/hooks.c:973:
+ * This hook allows us to retrieve a copy of the extended attribute representation of the security label

WARNING:LONG_LINE_COMMENT: line over 80 characters
#975: FILE: security/provenance/hooks.c:975:
+ * Note that @name is the remainder of the attribute name after the security prefix has been removed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#978: FILE: security/provenance/hooks.c:978:
+ * @param name The name of extended attribute, which must be provenance (or an error will be thrown).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#980: FILE: security/provenance/hooks.c:980:
+ * @param alloc Specify if the call should return a value via the buffer or just the value length.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#981: FILE: security/provenance/hooks.c:981:
+ * @return Size of the buffer on success, which in this case is the size of the provenance entry; -ENOMEM if inode provenance is NULL; -EOPNOTSUPP if name of the attribute is not provenance.

WARNING:LONG_LINE: line over 80 characters
#998: FILE: security/provenance/hooks.c:998:
+	__memcpy_ss(*buffer, sizeof(union prov_elt), prov_elt(iprov), sizeof(union prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1006: FILE: security/provenance/hooks.c:1006:
+ * This function copies the extended attribute of provenance associated with @inode into @buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1009: FILE: security/provenance/hooks.c:1009:
+ * If @buffer is not NULL and the length of the provenance attribute name is smaller than @buffer_size,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1011: FILE: security/provenance/hooks.c:1011:
+ * @param inode The inode whose provenance extended attribute is to be retrieved.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1031: FILE: security/provenance/hooks.c:1031:
+ * This hook is triggered when checking file permissions before accessing an open file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1033: FILE: security/provenance/hooks.c:1033:
+ * A security module can use this hook to perform additional checking on these operations,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1034: FILE: security/provenance/hooks.c:1034:
+ * e.g., to revalidate permissions on use to support privilege bracketing or policy changes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1035: FILE: security/provenance/hooks.c:1035:
+ * Notice that this hook is used when the actual read/write operations are performed,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1036: FILE: security/provenance/hooks.c:1036:
+ * whereas the inode_security_ops hook is called when a file is opened (as well as many other operations).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1038: FILE: security/provenance/hooks.c:1038:
+ * Although this hook can be used to revalidate permissions for various system call operations that read or write files,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1047: FILE: security/provenance/hooks.c:1047:
+ * @return 0 if permission is granted; -ENOMEM if inode provenance is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#1063: FILE: security/provenance/hooks.c:1063:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1067: FILE: security/provenance/hooks.c:1067:
+			rc = generates(RL_WRITE, cprov, tprov, iprov, file, mask);

WARNING:LONG_LINE: line over 80 characters
#1094: FILE: security/provenance/hooks.c:1094:
+			rc = generates(RL_WRITE, cprov, tprov, iprov, file, mask);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1119: FILE: security/provenance/hooks.c:1119:
+ * @brief Record provenance when file_splice_pipe_to_pipe hook is triggered (splice system call).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1126: FILE: security/provenance/hooks.c:1126:
+ * @return 0 if no error occurred; -ENOMEM if either end of the file provenance entry is NULL; Other error code inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1129: FILE: security/provenance/hooks.c:1129:
+static int provenance_file_splice_pipe_to_pipe(struct file *in, struct file *out)

WARNING:LONG_LINE: line over 80 characters
#1141: FILE: security/provenance/hooks.c:1141:
+	spin_lock_irqsave_nested(prov_lock(inprov), irqflags, PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE: line over 80 characters
#1165: FILE: security/provenance/hooks.c:1165:
+	spin_lock_irqsave_nested(prov_lock(iprov), irqflags, PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE: line over 80 characters
#1168: FILE: security/provenance/hooks.c:1168:
+		rc = record_influences_kernel(RL_LOAD_UNKNOWN, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1171: FILE: security/provenance/hooks.c:1171:
+		rc = record_influences_kernel(RL_LOAD_FIRMWARE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1174: FILE: security/provenance/hooks.c:1174:
+		rc = record_influences_kernel(RL_LOAD_FIRMWARE_PREALLOC_BUFFER, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1177: FILE: security/provenance/hooks.c:1177:
+		rc = record_influences_kernel(RL_LOAD_MODULE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1180: FILE: security/provenance/hooks.c:1180:
+		rc = record_influences_kernel(RL_LOAD_KEXEC_IMAGE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1183: FILE: security/provenance/hooks.c:1183:
+		rc = record_influences_kernel(RL_LOAD_KEXEC_INITRAMFS, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1186: FILE: security/provenance/hooks.c:1186:
+		rc = record_influences_kernel(RL_LOAD_POLICY, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1189: FILE: security/provenance/hooks.c:1189:
+		rc = record_influences_kernel(RL_LOAD_CERTIFICATE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1192: FILE: security/provenance/hooks.c:1192:
+		rc = record_influences_kernel(RL_LOAD_UNDEFINED, iprov, tprov, file);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1202: FILE: security/provenance/hooks.c:1202:
+ * This hook is triggered when saving open-time permission checking state for later use upon file_permission,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1205: FILE: security/provenance/hooks.c:1205:
+ * Information flows from inode of the file to be opened to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1208: FILE: security/provenance/hooks.c:1208:
+ * @return 0 if no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1221: FILE: security/provenance/hooks.c:1221:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1232: FILE: security/provenance/hooks.c:1232:
+ * This hook allows security modules to control the ability of a process to receive an open file descriptor via socket IPC.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1234: FILE: security/provenance/hooks.c:1234:
+ * Information flows from inode of the file being received to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1236: FILE: security/provenance/hooks.c:1236:
+ * @return 0 if permission is granted, no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1249: FILE: security/provenance/hooks.c:1249:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1275: FILE: security/provenance/hooks.c:1275:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1308: FILE: security/provenance/hooks.c:1308:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1326: FILE: security/provenance/hooks.c:1326:
+ * record provenance relation RL_MMAP_WRITE and/or RL_MMAP_READ and/or RL_MMAP_EXEC by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1330: FILE: security/provenance/hooks.c:1330:
+ * we create an additional provenance node to represent the private mapped inode by calling function "branch_mmap",

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1331: FILE: security/provenance/hooks.c:1331:
+ * record provenance relation RL_MMAP by calling "derives" function because information flows from the original mapped file to the private file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1333: FILE: security/provenance/hooks.c:1333:
+ * record provenance relation RL_MMAP_WRITE and/or RL_MMAP_READ and/or RL_MMAP_EXEC by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1334: FILE: security/provenance/hooks.c:1334:
+ * Information flows between the new private mmap node and calling process and its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1341: FILE: security/provenance/hooks.c:1341:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if the original file inode provenance entry is NULL; Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1360: FILE: security/provenance/hooks.c:1360:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1367: FILE: security/provenance/hooks.c:1367:
+			rc = uses(RL_MMAP_WRITE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1371: FILE: security/provenance/hooks.c:1371:
+			rc = uses(RL_MMAP_READ, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1375: FILE: security/provenance/hooks.c:1375:
+			rc = uses(RL_MMAP_EXEC, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1380: FILE: security/provenance/hooks.c:1380:
+			rc = uses(RL_MMAP_WRITE_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1384: FILE: security/provenance/hooks.c:1384:
+			rc = uses(RL_MMAP_READ_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1388: FILE: security/provenance/hooks.c:1388:
+			rc = uses(RL_MMAP_EXEC_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1401: FILE: security/provenance/hooks.c:1401:
+ * We obtain the provenance entry of the mmap'ed file, and if it shows that the mmap'ed file is shared based on the flags,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1403: FILE: security/provenance/hooks.c:1403:
+ * Information flows from cred of the process that unmmaps the file to the mmap'ed file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1404: FILE: security/provenance/hooks.c:1404:
+ * Note that if the file to be unmmap'ed is private, the provenance of the mmap'ed file is short-lived and thus no longer exists.

WARNING:LONG_LINE: line over 80 characters
#1427: FILE: security/provenance/hooks.c:1427:
+			spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1428: FILE: security/provenance/hooks.c:1428:
+			spin_lock_nested(prov_lock(iprov), PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1440: FILE: security/provenance/hooks.c:1440:
+ * This hook is triggered when checking permission for an ioctl operation on @file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1443: FILE: security/provenance/hooks.c:1443:
+ * When @arg represents a user space pointer, it should never be used by the security module.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1444: FILE: security/provenance/hooks.c:1444:
+ * Record provenance relation RL_WRITE_IOCTL by calling "generates" function and RL_READ_IOCTL by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1450: FILE: security/provenance/hooks.c:1450:
+ * @return 0 if permission is granted or no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from generates/uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1465: FILE: security/provenance/hooks.c:1465:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1483: FILE: security/provenance/hooks.c:1483:
+ * This hooks allocates and attaches a security structure to the msg->security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1484: FILE: security/provenance/hooks.c:1484:
+ * The security field is initialized to NULL when the structure is first created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1485: FILE: security/provenance/hooks.c:1485:
+ * This function initializes and attaches a new provenance entry to the msg->provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1486: FILE: security/provenance/hooks.c:1486:
+ * We create a new provenance node ENT_MSG and update the information in the provenance entry from @msg.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1488: FILE: security/provenance/hooks.c:1488:
+ * Information flows from cred of the calling process to the task, and eventually to the newly created msg node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1490: FILE: security/provenance/hooks.c:1490:
+ * @return 0 if operation was successful and permission is granted; -ENOMEM if no memory can be allocated for the new provenance entry; Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1505: FILE: security/provenance/hooks.c:1505:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1514: FILE: security/provenance/hooks.c:1514:
+ * This hook is triggered when deallocating the security structure for this message.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1515: FILE: security/provenance/hooks.c:1515:
+ * Free msg provenance entry when security structure for this message is deallocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1516: FILE: security/provenance/hooks.c:1516:
+ * If the msg has a valid provenance entry pointer (i.e., non-NULL), free the memory and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1529: FILE: security/provenance/hooks.c:1529:
+ * @brief Helper function for two security hooks: msg_queue_msgsnd and mq_timedsend.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1532: FILE: security/provenance/hooks.c:1532:
+ * Information flows from calling process's cred to the process, and eventually to msg.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1534: FILE: security/provenance/hooks.c:1534:
+ * @return 0 if no error occurred; Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1545: FILE: security/provenance/hooks.c:1545:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1556: FILE: security/provenance/hooks.c:1556:
+ * This hook is trigger when checking permission before a message, @msg, is enqueued on the message queue, @msq.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1561: FILE: security/provenance/hooks.c:1561:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgsnd function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1580: FILE: security/provenance/hooks.c:1580:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgsnd function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1591: FILE: security/provenance/hooks.c:1591:
+ * @brief Helper function for two security hooks: msg_queue_msgrcv and mq_timedreceive.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1594: FILE: security/provenance/hooks.c:1594:
+ * Information flows from msg to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1597: FILE: security/provenance/hooks.c:1597:
+ * @return 0 if no error occurred; Other error codes inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1607: FILE: security/provenance/hooks.c:1607:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1618: FILE: security/provenance/hooks.c:1618:
+ * This hook is triggered when checking permission before a message, @msg, is removed from the message queue, @msq.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1619: FILE: security/provenance/hooks.c:1619:
+ * The @target task structure contains a pointer to the process that will be receiving the message

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1623: FILE: security/provenance/hooks.c:1623:
+ * and then simply calls the helper function __mq_msgrcv to record the information flow.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1629: FILE: security/provenance/hooks.c:1629:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgrcv function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1649: FILE: security/provenance/hooks.c:1649:
+ * We simply calls the helper function __mq_msgrcv to record the information flow.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1653: FILE: security/provenance/hooks.c:1653:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgrcv function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1668: FILE: security/provenance/hooks.c:1668:
+ * This hunk is triggered when allocating and attaching a security structure to the shp->shm_perm.security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1669: FILE: security/provenance/hooks.c:1669:
+ * The security field is initialized to NULL when the structure is first created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1670: FILE: security/provenance/hooks.c:1670:
+ * This function allocates and attaches a provenance entry to the shp->shm_perm.provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1672: FILE: security/provenance/hooks.c:1672:
+ * It also fills in some provenance information based on the information contained in @shp.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1674: FILE: security/provenance/hooks.c:1674:
+ * For read, information flows from shared memory to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1676: FILE: security/provenance/hooks.c:1676:
+ * For write, information flows from the calling process's cree to the process, and eventually to shared memory.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1678: FILE: security/provenance/hooks.c:1678:
+ * @return 0 if operation was successful and permission is granted, no error occurred. -ENOMEM if no memory can be allocated to create a new ENT_SHM provenance entry. Other error code inherited from uses and generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1693: FILE: security/provenance/hooks.c:1693:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1706: FILE: security/provenance/hooks.c:1706:
+ * This hook is triggered when deallocating the security struct for this memory segment.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1707: FILE: security/provenance/hooks.c:1707:
+ * We simply free the memory of the allocated provenance entry if it exists, and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1722: FILE: security/provenance/hooks.c:1722:
+ * This hook is triggered when checking permissions prior to allowing the shmat system call to attach the

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1727: FILE: security/provenance/hooks.c:1727:
+ * Information flows from shared memory to the calling process, and then eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1729: FILE: security/provenance/hooks.c:1729:
+ * Record provenance relation RL_SH_ATTACH_READ by calling "uses" function and RL_SH_ATTACH_WRITE by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1734: FILE: security/provenance/hooks.c:1734:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if shared memory provenance entry does not exist. Other error codes inherited from uses and generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1737: FILE: security/provenance/hooks.c:1737:
+static int provenance_shm_shmat(struct kern_ipc_perm *shp, char __user *shmaddr, int shmflg)

WARNING:LONG_LINE: line over 80 characters
#1747: FILE: security/provenance/hooks.c:1747:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1755: FILE: security/provenance/hooks.c:1755:
+		rc = generates(RL_SH_ATTACH_WRITE, cprov, tprov, sprov, NULL, shmflg);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1767: FILE: security/provenance/hooks.c:1767:
+ * This hook is triggered when detaching the shared memory segment from the address space of the calling process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1768: FILE: security/provenance/hooks.c:1768:
+ * The to-be-detached segment must be currently attached with shmaddr equal to the value returned by the attaching shmat() call.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1770: FILE: security/provenance/hooks.c:1770:
+ * Information flows from the calling process's cred to the process, and eventually to the shared memory.

WARNING:LONG_LINE: line over 80 characters
#1783: FILE: security/provenance/hooks.c:1783:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1794: FILE: security/provenance/hooks.c:1794:
+ * This hook is triggered when allocating and attaching a security structure to the sk->sk_security field,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1796: FILE: security/provenance/hooks.c:1796:
+ * This function therefore allocates and attaches @sk_provenance structure to @sk.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1797: FILE: security/provenance/hooks.c:1797:
+ * The provenance of the local stream socket is the same as the cred provenance of the calling process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1801: FILE: security/provenance/hooks.c:1801:
+ * @return 0 if success and no error occurred; -ENOMEM if calling process's cred structure does not exist. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1819: FILE: security/provenance/hooks.c:1819:
+ * This hook allows a module to update or allocate a per-socket security structure.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1821: FILE: security/provenance/hooks.c:1821:
+ * but rather, the socket security information is stored in the associated inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1822: FILE: security/provenance/hooks.c:1822:
+ * Typically, the inode alloc_security hook will allocate and and attach security information to

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1825: FILE: security/provenance/hooks.c:1825:
+ * with additional information that wasn't available when the inode was allocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1827: FILE: security/provenance/hooks.c:1827:
+ * Information flows from the calling process's cred to the process, and eventually to the socket that is being created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1829: FILE: security/provenance/hooks.c:1829:
+ * This is becasuse kernel socket is a form of communication between kernel and userspace.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1836: FILE: security/provenance/hooks.c:1836:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance entry does not exist. Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1861: FILE: security/provenance/hooks.c:1861:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1869: FILE: security/provenance/hooks.c:1869:
+static int provenance_socket_socketpair(struct socket *socka, struct socket *sockb)

WARNING:LONG_LINE: line over 80 characters
#1883: FILE: security/provenance/hooks.c:1883:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1900: FILE: security/provenance/hooks.c:1900:
+ * This hook is triggered when checking permission before socket protocol layer bind operation is performed,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1901: FILE: security/provenance/hooks.c:1901:
+ * and the socket @sock is bound to the address specified in the @address parameter.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1902: FILE: security/provenance/hooks.c:1902:
+ * The function records the provenance relations if the calling process is not set to be opaque (i.e., should be recorded).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1905: FILE: security/provenance/hooks.c:1905:
+ * Information flows from the cred of the calling process to the process itself, and eventually to the socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1906: FILE: security/provenance/hooks.c:1906:
+ * If the address family is PF_INET (we only support IPv4 for now), we check if we should record the packet from the socket,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1912: FILE: security/provenance/hooks.c:1912:
+ * @return 0 if permission is granted and no error occurred; -EINVAL if socket address is longer than @addrlen; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1943: FILE: security/provenance/hooks.c:1943:
+ * This hook is triggered when checking permission before socket protocol layer connect operation

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1945: FILE: security/provenance/hooks.c:1945:
+ * This function is similar to the above provenance_socket_bind function, except that we

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1950: FILE: security/provenance/hooks.c:1950:
+ * @return 0 if permission is granted and no error occurred; -EINVAL if socket address is longer than @addrlen; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited or unknown.

WARNING:LONG_LINE: line over 80 characters
#1966: FILE: security/provenance/hooks.c:1966:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1986: FILE: security/provenance/hooks.c:1986:
+ * This hook is triggered when checking permission before socket protocol layer listen operation.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1990: FILE: security/provenance/hooks.c:1990:
+ * @return 0 if no error occurred; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2003: FILE: security/provenance/hooks.c:2003:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2014: FILE: security/provenance/hooks.c:2014:
+ * This hook is triggered when checking permission before accepting a new connection.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2015: FILE: security/provenance/hooks.c:2015:
+ * Note that the new socket, @newsock, has been created and some information copied to it,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2022: FILE: security/provenance/hooks.c:2022:
+ * Information flows from the new socket to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2025: FILE: security/provenance/hooks.c:2025:
+ * @return 0 if permission is granted and no error occurred; Other error codes inherited from derives and uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2037: FILE: security/provenance/hooks.c:2037:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2050: FILE: security/provenance/hooks.c:2050:
+ * @brief Record provenance when socket_sendmsg_always/socket_sendmsg hook is triggered.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2052: FILE: security/provenance/hooks.c:2052:
+ * This hook is triggered when checking permission before transmitting a message to another socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2054: FILE: security/provenance/hooks.c:2054:
+ * Information flows from the calling process's cred to the calling process, and eventually to the sending socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2055: FILE: security/provenance/hooks.c:2055:
+ * If sk_family is PF_UNIX (or any local communication) and sk_type is not SOCK_DGRAM,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2063: FILE: security/provenance/hooks.c:2063:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if the sending socket's provenance entry does not exist; Other error codes inherited from generates and derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2087: FILE: security/provenance/hooks.c:2087:
+	    sock->sk->sk_type != SOCK_DGRAM) {  // Datagram handled by unix_may_send hook.

WARNING:LONG_LINE: line over 80 characters
#2095: FILE: security/provenance/hooks.c:2095:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2111: FILE: security/provenance/hooks.c:2111:
+ * @brief Record provenance when socket_recvmsg_always/socket_recvmsg hook is triggered.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2113: FILE: security/provenance/hooks.c:2113:
+ * This hook is triggered when checking permission before receiving a message from a socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2114: FILE: security/provenance/hooks.c:2114:
+ * This function is similar to the above provenance_socket_sendmsg_always function except the direction is reversed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2117: FILE: security/provenance/hooks.c:2117:
+ * Information flows from the sending socket (@peer) to the receiving socket (@sock).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2119: FILE: security/provenance/hooks.c:2119:
+ * Information flows from the receiving socket to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2124: FILE: security/provenance/hooks.c:2124:
+ * @return 0 if permission is granted, and no error occurred; -ENOMEM if the receiving socket's provenance entry does not exist; Other error codes inherited from uses and derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2150: FILE: security/provenance/hooks.c:2150:
+	    sock->sk->sk_type != SOCK_DGRAM) {             // datagran handled by unix_may_send

WARNING:LONG_LINE: line over 80 characters
#2158: FILE: security/provenance/hooks.c:2158:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2177: FILE: security/provenance/hooks.c:2177:
+ * This hooks is triggered when checking permissions on incoming network packets.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2178: FILE: security/provenance/hooks.c:2178:
+ * This hook is distinct from Netfilter's IP input hooks since it is the first time that

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2182: FILE: security/provenance/hooks.c:2182:
+ * create a packet provenance node and fill the provenance information of the node from @skb,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2188: FILE: security/provenance/hooks.c:2188:
+ * @return 0 if no error occurred; -ENOMEM if sk provenance does not exist. Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2226: FILE: security/provenance/hooks.c:2226:
+ * This hook is triggered when checking permissions before establishing a Unix domain stream connection b]etween @sock and @other.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2228: FILE: security/provenance/hooks.c:2228:
+ * Since this is simply to connect (no information should flow between the two local sockets yet),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2231: FILE: security/provenance/hooks.c:2231:
+ * Information flows from the calling process's cred to the task , and eventually to the sending socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2235: FILE: security/provenance/hooks.c:2235:
+ * @return 0 if permission is granted; Other error code inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2248: FILE: security/provenance/hooks.c:2248:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2259: FILE: security/provenance/hooks.c:2259:
+ * This hook is triggered when checking permissions before connecting or sending datagrams from @sock to @other.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2261: FILE: security/provenance/hooks.c:2261:
+ * Information flows from the sending socket (@sock) to the receiving socket (@other).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2264: FILE: security/provenance/hooks.c:2264:
+ * @return 0 if permission is granted and no error occurred; Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2275: FILE: security/provenance/hooks.c:2275:
+	spin_lock_irqsave_nested(prov_lock(iprov), irqflags, PROVENANCE_LOCK_SOCKET);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2286: FILE: security/provenance/hooks.c:2286:
+ * This hook is triggered when saving security information in the bprm->security field,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2287: FILE: security/provenance/hooks.c:2287:
+ * typically based on information about the bprm->file, for later use by the apply_creds hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2288: FILE: security/provenance/hooks.c:2288:
+ * This hook may also optionally check permissions (e.g. for transitions between security domains).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2289: FILE: security/provenance/hooks.c:2289:
+ * This hook may be called multiple times during a single execve, e.g. for interpreters.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2290: FILE: security/provenance/hooks.c:2290:
+ * The hook can tell whether it has already been called by checking to see if @bprm->security is non-NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2291: FILE: security/provenance/hooks.c:2291:
+ * If so, then the hook may decide either to retain the security information saved earlier or to replace it.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2297: FILE: security/provenance/hooks.c:2297:
+ * @return 0 if the hook is successful and permission is granted; -ENOMEM if bprm->cred's provenance does not exist. Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2324: FILE: security/provenance/hooks.c:2324:
+ * It allows a check the @bprm->security value which is set in the preceding set_creds call.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2325: FILE: security/provenance/hooks.c:2325:
+ * The primary difference from set_creds is that the argv list and envp list are reliably available in @bprm.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2328: FILE: security/provenance/hooks.c:2328:
+ * If the inode of bprm->file is opaque, we set the bprm->cred to be opaque (i.e., do not track).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2329: FILE: security/provenance/hooks.c:2329:
+ * The relations between the bprm arguments and bprm->cred are recorded by calling record_args function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2331: FILE: security/provenance/hooks.c:2331:
+ * @return 0 if no error occurred; -ENOMEM if bprm->cred provenance does not exist. Other error codes inherited from record_args function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2356: FILE: security/provenance/hooks.c:2356:
+ * This hook is triggered when preparing to install the new security attributes of a process being transformed by an execve operation,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2369: FILE: security/provenance/hooks.c:2369:
+ * The old process gets the name of the new process by calling record_node_name function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2371: FILE: security/provenance/hooks.c:2371:
+ * the new process bprm->cred's provenance will therefore be opaque and we do not track any of the relations.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2391: FILE: security/provenance/hooks.c:2391:
+ * This hook is triggered when allocating and attaching a security structure to the sb->s_security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2393: FILE: security/provenance/hooks.c:2393:
+ * This function allocates and initializes a provenance structure to sb->s_provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2397: FILE: security/provenance/hooks.c:2397:
+ * @return 0 if operation was successful; -ENOMEM if no memory can be allocated for a new provenance entry. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2413: FILE: security/provenance/hooks.c:2413:
+ * This hooks is triggered when deallocating and clearing the sb->s_security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2414: FILE: security/provenance/hooks.c:2414:
+ * This function frees the memory of the allocated provenance field and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2429: FILE: security/provenance/hooks.c:2429:
+ * This function will update the Universal Unique ID of the provenance entry of the device @sb->s_provenance once it is mounted.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2430: FILE: security/provenance/hooks.c:2430:
+ * We obtain this information from @sb if it exists, or we give it a random value.

WARNING:LONG_LINE: line over 80 characters
#2448: FILE: security/provenance/hooks.c:2448:
+		get_random_bytes(prov_elt(sbprov)->sb_info.uuid, 16 * sizeof(uint8_t));

WARNING:LONG_LINE: line over 80 characters
#2481: FILE: security/provenance/hooks.c:2481:
+	LSM_HOOK_INIT(inode_alloc_security,     provenance_inode_alloc_security),

WARNING:LONG_LINE: line over 80 characters
#2512: FILE: security/provenance/hooks.c:2512:
+	LSM_HOOK_INIT(file_splice_pipe_to_pipe, provenance_file_splice_pipe_to_pipe),

WARNING:LONG_LINE: line over 80 characters
#2517: FILE: security/provenance/hooks.c:2517:
+	LSM_HOOK_INIT(msg_msg_alloc_security,   provenance_msg_msg_alloc_security),

WARNING:LONG_LINE: line over 80 characters
#2518: FILE: security/provenance/hooks.c:2518:
+	LSM_HOOK_INIT(msg_msg_free_security,    provenance_msg_msg_free_security),

WARNING:LONG_LINE: line over 80 characters
#2539: FILE: security/provenance/hooks.c:2539:
+	LSM_HOOK_INIT(socket_sendmsg_always,    provenance_socket_sendmsg_always),

WARNING:LONG_LINE: line over 80 characters
#2540: FILE: security/provenance/hooks.c:2540:
+	LSM_HOOK_INIT(socket_recvmsg_always,    provenance_socket_recvmsg_always),

WARNING:LONG_LINE: line over 80 characters
#2554: FILE: security/provenance/hooks.c:2554:
+	LSM_HOOK_INIT(bprm_committing_creds,    provenance_bprm_committing_creds),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2622: FILE: security/provenance/hooks.c:2622:
+ * 4. Set up kernel memory cache for regular provenance entries (NULL on failure).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2630: FILE: security/provenance/hooks.c:2630:
+ * Work_queue helps persiste provenance of inodes (if needed) during the operations that cannot sleep,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2631: FILE: security/provenance/hooks.c:2631:
+ * since persists provenance requires writing to disk (which means sleep is needed).

WARNING:LONG_LINE_STRING: line over 80 characters
#2656: FILE: security/provenance/hooks.c:2656:
+	security_add_hooks(provenance_hooks, ARRAY_SIZE(provenance_hooks), "provenance");       // Register provenance security hooks.

total: 0 errors, 317 warnings, 2666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/hooks.c has style problems, please review.
-----------------------------
security/provenance/machine.c
-----------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/machine.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#23: FILE: security/provenance/machine.c:23:
+	__memcpy_ss(&(prov_machine->machine_info.utsname), sizeof(struct new_utsname), uname, sizeof(struct new_utsname));

WARNING:LONG_LINE: line over 80 characters
#36: FILE: security/provenance/machine.c:36:
+	__memcpy_ss(prov_machine->machine_info.commit, PROV_COMMIT_MAX_LENGTH, CAMFLOW_COMMIT, strnlen(CAMFLOW_COMMIT, PROV_COMMIT_MAX_LENGTH));

WARNING:LONG_LINE: line over 80 characters
#45: FILE: security/provenance/machine.c:45:
+	pr_info("Provenance: version %d.%d.%d", prov_machine->machine_info.cam_major, prov_machine->machine_info.cam_minor, prov_machine->machine_info.cam_patch);

WARNING:LONG_LINE: line over 80 characters
#47: FILE: security/provenance/machine.c:47:
+	pr_info("Provenance: sysname %s", prov_machine->machine_info.utsname.sysname);

WARNING:LONG_LINE: line over 80 characters
#48: FILE: security/provenance/machine.c:48:
+	pr_info("Provenance: nodename %s", prov_machine->machine_info.utsname.nodename);

WARNING:LONG_LINE: line over 80 characters
#49: FILE: security/provenance/machine.c:49:
+	pr_info("Provenance: release %s", prov_machine->machine_info.utsname.release);

WARNING:LONG_LINE: line over 80 characters
#50: FILE: security/provenance/machine.c:50:
+	pr_info("Provenance: version %s", prov_machine->machine_info.utsname.version);

WARNING:LONG_LINE: line over 80 characters
#51: FILE: security/provenance/machine.c:51:
+	pr_info("Provenance: machine %s", prov_machine->machine_info.utsname.machine);

WARNING:LONG_LINE: line over 80 characters
#52: FILE: security/provenance/machine.c:52:
+	pr_info("Provenance: domainname %s", prov_machine->machine_info.utsname.domainname);

total: 0 errors, 10 warnings, 53 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/machine.c has style problems, please review.
-------------------------------
security/provenance/memcpy_ss.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/memcpy_ss.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#15: FILE: security/provenance/memcpy_ss.c:15:
+#include <asm/bug.h>

WARNING:LONG_LINE: line over 80 characters
#21: FILE: security/provenance/memcpy_ss.c:21:
+int __memcpy_ss(void *dest, __kernel_size_t dmax, const void *src, __kernel_size_t smax)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#27: FILE: security/provenance/memcpy_ss.c:27:
+		pr_err("__memcpy_ss: dest is null.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#31: FILE: security/provenance/memcpy_ss.c:31:
+		pr_err("__memcpy_ss: dmax is 0.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#35: FILE: security/provenance/memcpy_ss.c:35:
+		pr_err("__memcpy_ss: dmax is too large.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#39: FILE: security/provenance/memcpy_ss.c:39:
+		pr_err("__memcpy_ss: sp is null.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#44: FILE: security/provenance/memcpy_ss.c:44:
+		pr_err("__memcpy_ss: smax is 0.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#49: FILE: security/provenance/memcpy_ss.c:49:
+		pr_err("__memcpy_ss: smax greater than dmax.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#56: FILE: security/provenance/memcpy_ss.c:56:
+		pr_err("__memcpy_ss: dest and src overlap.");

total: 0 errors, 10 warnings, 62 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/memcpy_ss.c has style problems, please review.
-------------------------------
security/provenance/netfilter.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/netfilter.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#19: FILE: security/provenance/netfilter.c:19:
+ * @brief Record provenance of an outgoing packets, which is done through NetFilter (instead of LSM) hooks.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#21: FILE: security/provenance/netfilter.c:21:
+ * We record the provenance relation RL_SND_PACKET by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#24: FILE: security/provenance/netfilter.c:24:
+ * 1. The calling process cred's provenance (obtained from current_provenance) is not recorded or does not exist, or

WARNING:LONG_LINE: line over 80 characters
#75: FILE: security/provenance/netfilter.c:75:
+	return nf_register_net_hooks(net, provenance_nf_ops, ARRAY_SIZE(provenance_nf_ops));

WARNING:LONG_LINE: line over 80 characters
#80: FILE: security/provenance/netfilter.c:80:
+	nf_unregister_net_hooks(net, provenance_nf_ops, ARRAY_SIZE(provenance_nf_ops));

total: 0 errors, 6 warnings, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/netfilter.c has style problems, please review.
-------------------------------
security/provenance/propagate.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/propagate.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

total: 0 errors, 1 warnings, 40 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/propagate.c has style problems, please review.
---------------------------
security/provenance/query.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/query.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

total: 0 errors, 1 warnings, 46 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/query.c has style problems, please review.
---------------------------
security/provenance/relay.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/relay.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#34: FILE: security/provenance/relay.c:34:
+	struct rchan *prov;             // Relay buffer for regular provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#35: FILE: security/provenance/relay.c:35:
+	struct rchan *long_prov;        // Relay buffer for long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#40: FILE: security/provenance/relay.c:40:
+ * @brief Add an element to the tail end of the relay list, which is identified by the "extern struct list_head relay_list" above.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#42: FILE: security/provenance/relay.c:42:
+ * @param prov Member of the element in the relay list. This is a relay channel pointer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#43: FILE: security/provenance/relay.c:43:
+ * @param long_prov Member of the element in the relay list. This is a relay channel pointer.

WARNING:LONG_LINE: line over 80 characters
#89: FILE: security/provenance/relay.c:89:
+			pr_warn("Provenance: relay (%s) on core %d is full.", chan->base_filename, cpu);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#98: FILE: security/provenance/relay.c:98:
+ * @brief Callback function of function "create_buf_file". This callback function creates relay file in "debugfs".

WARNING:LONG_LINE_COMMENT: line over 80 characters
#111: FILE: security/provenance/relay.c:111:
+ * @brief Callback function of function "remove_buf_file". This callback function removes the relay file from "debugfs".

WARNING:LONG_LINE: line over 80 characters
#137: FILE: security/provenance/relay.c:137:
+			cookie = async_schedule(__async_handle_boot_buffer, NULL);

WARNING:LONG_LINE: line over 80 characters
#138: FILE: security/provenance/relay.c:138:
+			pr_info("Provenance: schedlued boot buffer async task %llu.", cookie);

WARNING:LONG_LINE: line over 80 characters
#167: FILE: security/provenance/relay.c:167:
+			cookie = async_schedule(__async_handle_long_boot_buffer, NULL);

WARNING:LONG_LINE: line over 80 characters
#168: FILE: security/provenance/relay.c:168:
+			pr_info("Provenance: schedlued boot buffer async task %llu.", cookie);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#185: FILE: security/provenance/relay.c:185:
+ * @brief Write whatever in boot buffer to relay buffer when relay buffer is ready.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#187: FILE: security/provenance/relay.c:187:
+ * This function writes what's in boot_buffer to relay buffer for regular provenance entries,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#190: FILE: security/provenance/relay.c:190:
+ * Once done, set boolean value relay_ready to true to signal that relay buffer is ready to be used.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#193: FILE: security/provenance/relay.c:193:
+void refresh_prov_machine(void);

WARNING:LONG_LINE: line over 80 characters
#212: FILE: security/provenance/relay.c:212:
+	pr_info("Provenance: schedlued long boot buffer async task %llu.", cookie);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#216: FILE: security/provenance/relay.c:216:
+ * @brief Create a provenance relay buffer channel for both regular and long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#219: FILE: security/provenance/relay.c:219:
+ * Each relay channel contains a relay buffer for regular provenance entries and a relay buffer for long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#220: FILE: security/provenance/relay.c:220:
+ * @param buffer Contains the name of the relay buffer for regular provenance entries (prepend "long_" for the relay buffer name for long provenance entries)

WARNING:LONG_LINE_COMMENT: line over 80 characters
#222: FILE: security/provenance/relay.c:222:
+ * @return 0 if no error occurred; -EFAULT if name already exists for relay buffer or opening new relay buffer failed; -ENOMEM if length of the name of the relay buffer is too long. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#245: FILE: security/provenance/relay.c:245:
+	chan = relay_open(buffer, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#250: FILE: security/provenance/relay.c:250:
+	long_chan = relay_open(long_name, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#266: FILE: security/provenance/relay.c:266:
+	__memcpy_ss(tmp, sizeof(struct provenance), msg, sizeof(union prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#272: FILE: security/provenance/relay.c:272:
+ * @brief Write provenance information to relay buffer or to boot buffer if relay buffer is not ready yet during boot.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#274: FILE: security/provenance/relay.c:274:
+ * If in an unlikely event that relay is not ready, provenance information should be written to the boot buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#275: FILE: security/provenance/relay.c:275:
+ * However, in an unlikely event that the boot buffer is full, an error is thrown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#276: FILE: security/provenance/relay.c:276:
+ * Otherwise (i.e., boot buffer is not full) provenance information is written to the next empty slot in the boot buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#278: FILE: security/provenance/relay.c:278:
+ * It will write to every relay buffer in the relay_list for every CamQuery query use.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#279: FILE: security/provenance/relay.c:279:
+ * This is because once provenance is read from a relay buffer, it will be consumed from the buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#280: FILE: security/provenance/relay.c:280:
+ * We therefore need to write to multiple relay buffers if we want to consume/use same provenance data multiple times.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#281: FILE: security/provenance/relay.c:281:
+ * @param msg Provenance information to be written to either boot buffer or relay buffer.

WARNING:LONG_LINE: line over 80 characters
#304: FILE: security/provenance/relay.c:304:
+	union long_prov_elt *tmp = kmem_cache_alloc(long_provenance_cache, GFP_ATOMIC);

WARNING:LONG_LINE: line over 80 characters
#306: FILE: security/provenance/relay.c:306:
+	__memcpy_ss(tmp, sizeof(union long_prov_elt), msg, sizeof(union long_prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#312: FILE: security/provenance/relay.c:312:
+ * @brief Write long provenance information to relay buffer or to boot buffer if relay buffer is not ready yet during boot.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#314: FILE: security/provenance/relay.c:314:
+ * This function performs the same function as "prov_write" function except that it writes a long provenance information,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#316: FILE: security/provenance/relay.c:316:
+ * @param msg Long provenance information to be written to either long boot buffer or long relay buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#339: FILE: security/provenance/relay.c:339:
+ * Initialize provenance relay buffer with a base relay buffer for regular provenance entries,

WARNING:LONG_LINE: line over 80 characters
#349: FILE: security/provenance/relay.c:349:
+	prov_chan = relay_open(PROV_BASE_NAME, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#353: FILE: security/provenance/relay.c:353:
+	long_prov_chan = relay_open(LONG_PROV_BASE_NAME, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

total: 0 errors, 41 warnings, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/relay.c has style problems, please review.
--------------------------
security/provenance/type.c
--------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/type.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#16: FILE: security/provenance/type.c:16:
+static const char RL_STR_UNKNOWN[] = "unknown";                                                         // unknown relation should not happen

WARNING:LONG_LINE: line over 80 characters
#17: FILE: security/provenance/type.c:17:
+static const char RL_STR_READ[] = "read";                                                               // read to inode

WARNING:LONG_LINE: line over 80 characters
#18: FILE: security/provenance/type.c:18:
+static const char RL_STR_READ_IOCTL[] = "read_ioctl";                                                   // ioctl read

WARNING:LONG_LINE: line over 80 characters
#19: FILE: security/provenance/type.c:19:
+static const char RL_STR_WRITE[] = "write";                                                             // write to inode

WARNING:LONG_LINE: line over 80 characters
#20: FILE: security/provenance/type.c:20:
+static const char RL_STR_WRITE_IOCTL[] = "write_ioctl";                                                 // ioctl write

WARNING:LONG_LINE: line over 80 characters
#21: FILE: security/provenance/type.c:21:
+static const char RL_STR_CLONE_MEM[] = "clone_mem";                                                     // memory copy on clone

WARNING:LONG_LINE: line over 80 characters
#22: FILE: security/provenance/type.c:22:
+static const char RL_STR_MSG_CREATE[] = "msg_create";                                                   // create msg (IPC message passing)

WARNING:LONG_LINE: line over 80 characters
#23: FILE: security/provenance/type.c:23:
+static const char RL_STR_SOCKET_CREATE[] = "socket_create";                                             // create socket

WARNING:LONG_LINE: line over 80 characters
#24: FILE: security/provenance/type.c:24:
+static const char RL_STR_SOCKET_PAIR_CREATE[] = "socket_pair_create";                                   // create socket pair

WARNING:LONG_LINE: line over 80 characters
#25: FILE: security/provenance/type.c:25:
+static const char RL_STR_INODE_CREATE[] = "inode_create";                                               // create inode

WARNING:LONG_LINE: line over 80 characters
#26: FILE: security/provenance/type.c:26:
+static const char RL_STR_SETUID[] = "setuid";                                                           // setuid

WARNING:LONG_LINE: line over 80 characters
#27: FILE: security/provenance/type.c:27:
+static const char RL_STR_SETGID[] = "setpgid";                                                          // setpgid

WARNING:LONG_LINE: line over 80 characters
#28: FILE: security/provenance/type.c:28:
+static const char RL_STR_GETGID[] = "getpgid";                                                          // getpgid

WARNING:LONG_LINE: line over 80 characters
#29: FILE: security/provenance/type.c:29:
+static const char RL_STR_SH_WRITE[] = "sh_write";                                                       // writing to shared state

WARNING:LONG_LINE: line over 80 characters
#30: FILE: security/provenance/type.c:30:
+static const char RL_STR_PROC_WRITE[] = "memory_write";                                                 // writing to process memory (i.e. shared between thread)

WARNING:LONG_LINE: line over 80 characters
#31: FILE: security/provenance/type.c:31:
+static const char RL_STR_BIND[] = "bind";                                                               // socket bind operation

WARNING:LONG_LINE: line over 80 characters
#32: FILE: security/provenance/type.c:32:
+static const char RL_STR_CONNECT[] = "connect";                                                         // socket connection operation

WARNING:LONG_LINE: line over 80 characters
#33: FILE: security/provenance/type.c:33:
+static const char RL_STR_CONNECT_UNIX_STREAM[] = "connect_unix_stream";                                 // unix stream socket connection operation

WARNING:LONG_LINE: line over 80 characters
#34: FILE: security/provenance/type.c:34:
+static const char RL_STR_LISTEN[] = "listen";                                                           // socket listen operation

WARNING:LONG_LINE: line over 80 characters
#35: FILE: security/provenance/type.c:35:
+static const char RL_STR_ACCEPT[] = "accept";                                                           // socket accept operation

WARNING:LONG_LINE: line over 80 characters
#36: FILE: security/provenance/type.c:36:
+static const char RL_STR_OPEN[] = "open";                                                               // file open operation

WARNING:LONG_LINE: line over 80 characters
#37: FILE: security/provenance/type.c:37:
+static const char RL_STR_FILE_RCV[] = "file_rcv";                                                       // open file descriptor recevied through IPC

WARNING:LONG_LINE: line over 80 characters
#38: FILE: security/provenance/type.c:38:
+static const char RL_STR_FILE_LOCK[] = "file_lock";                                                     // represent file lock operation

WARNING:LONG_LINE: line over 80 characters
#39: FILE: security/provenance/type.c:39:
+static const char RL_STR_FILE_SIGIO[] = "file_sigio";                                                   // represent IO signal

WARNING:LONG_LINE: line over 80 characters
#40: FILE: security/provenance/type.c:40:
+static const char RL_STR_VERSION[] = "version_entity";                                                  // connect version of entity object

WARNING:LONG_LINE: line over 80 characters
#41: FILE: security/provenance/type.c:41:
+static const char RL_STR_MUNMAP[] = "munmap";                                                           // munmap operation

WARNING:LONG_LINE: line over 80 characters
#42: FILE: security/provenance/type.c:42:
+static const char RL_STR_SHMDT[] = "shmdt";                                                             // shmdt operation

WARNING:LONG_LINE: line over 80 characters
#43: FILE: security/provenance/type.c:43:
+static const char RL_STR_LINK[] = "link";                                                               // create a link

WARNING:LONG_LINE: line over 80 characters
#44: FILE: security/provenance/type.c:44:
+static const char RL_STR_RENAME[] = "rename";                                                           // rename inode

WARNING:LONG_LINE: line over 80 characters
#45: FILE: security/provenance/type.c:45:
+static const char RL_STR_UNLINK[] = "unlink";                                                           // delete a link

WARNING:LONG_LINE: line over 80 characters
#46: FILE: security/provenance/type.c:46:
+static const char RL_STR_SYMLINK[] = "symlink";                                                         // create a symlink

WARNING:LONG_LINE: line over 80 characters
#47: FILE: security/provenance/type.c:47:
+static const char RL_STR_SPLICE_IN[] = "splice_in";                                                     // pipe splice operation from in file

WARNING:LONG_LINE: line over 80 characters
#48: FILE: security/provenance/type.c:48:
+static const char RL_STR_SPLICE_OUT[] = "splice_out";                                                   // pipe splice operation to out file

WARNING:LONG_LINE: line over 80 characters
#49: FILE: security/provenance/type.c:49:
+static const char RL_STR_SETATTR[] = "setattr";                                                         // setattr operation (task -> iattr)

WARNING:LONG_LINE: line over 80 characters
#50: FILE: security/provenance/type.c:50:
+static const char RL_STR_SETATTR_INODE[] = "setattr_inode";                                             // setattr operation (iattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#51: FILE: security/provenance/type.c:51:
+static const char RL_STR_ACCEPT_SOCKET[] = "accept_socket";                                             // accept operation (parent -> child socket)

WARNING:LONG_LINE: line over 80 characters
#52: FILE: security/provenance/type.c:52:
+static const char RL_STR_SETXATTR[] = "setxattr";                                                       // setxattr operation (task -> xattr)

WARNING:LONG_LINE: line over 80 characters
#53: FILE: security/provenance/type.c:53:
+static const char RL_STR_SETXATTR_INODE[] = "setxattr_inode";                                           // setxattr operation (xattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#54: FILE: security/provenance/type.c:54:
+static const char RL_STR_RMVXATTR[] = "removexattr";                                                    // remove xattr operation (task -> xattr)

WARNING:LONG_LINE: line over 80 characters
#55: FILE: security/provenance/type.c:55:
+static const char RL_STR_RMVXATTR_INODE[] = "removexattr_inode";                                        // remove xattr operation (xattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#56: FILE: security/provenance/type.c:56:
+static const char RL_STR_NAMED[] = "named";                                                             // connect path to inode

WARNING:LONG_LINE: line over 80 characters
#57: FILE: security/provenance/type.c:57:
+static const char RL_STR_ADDRESSED[] = "addressed";                                                     // connect address to inode

WARNING:LONG_LINE: line over 80 characters
#58: FILE: security/provenance/type.c:58:
+static const char RL_STR_EXEC[] = "exec";                                                               // exec operation

WARNING:LONG_LINE: line over 80 characters
#59: FILE: security/provenance/type.c:59:
+static const char RL_STR_EXEC_TASK[] = "exec_task";                                                     // exec operation

WARNING:LONG_LINE: line over 80 characters
#60: FILE: security/provenance/type.c:60:
+static const char RL_STR_PCK_CNT[] = "packet_content";                                                  // connect netwrok packet to its content

WARNING:LONG_LINE: line over 80 characters
#61: FILE: security/provenance/type.c:61:
+static const char RL_STR_CLONE[] = "clone";                                                             // clone operation

WARNING:LONG_LINE: line over 80 characters
#62: FILE: security/provenance/type.c:62:
+static const char RL_STR_VERSION_TASK[] = "version_activity";                                           // connection two versions of an activity

WARNING:LONG_LINE: line over 80 characters
#63: FILE: security/provenance/type.c:63:
+static const char RL_STR_SEARCH[] = "search";                                                           // search operation on directory

WARNING:LONG_LINE: line over 80 characters
#64: FILE: security/provenance/type.c:64:
+static const char RL_STR_GETATTR[] = "getattr";                                                         // getattr operation

WARNING:LONG_LINE: line over 80 characters
#65: FILE: security/provenance/type.c:65:
+static const char RL_STR_GETXATTR[] = "getxattr";                                                       // getxattr operation (xattr -> process)

WARNING:LONG_LINE: line over 80 characters
#66: FILE: security/provenance/type.c:66:
+static const char RL_STR_GETXATTR_INODE[] = "getxattr_inode";                                           // getxattr operation (inode -> xattr)

WARNING:LONG_LINE: line over 80 characters
#67: FILE: security/provenance/type.c:67:
+static const char RL_STR_LSTXATTR[] = "listxattr";                                                      // listxattr operation

WARNING:LONG_LINE: line over 80 characters
#68: FILE: security/provenance/type.c:68:
+static const char RL_STR_READ_LINK[] = "read_link";                                                     // readlink operation

WARNING:LONG_LINE: line over 80 characters
#69: FILE: security/provenance/type.c:69:
+static const char RL_STR_MMAP_READ[] = "mmap_read";                                                     // mmap mounting with read perm

WARNING:LONG_LINE: line over 80 characters
#70: FILE: security/provenance/type.c:70:
+static const char RL_STR_MMAP_EXEC[] = "mmap_exec";                                                     // mmap mounting with exec perm

WARNING:LONG_LINE: line over 80 characters
#71: FILE: security/provenance/type.c:71:
+static const char RL_STR_MMAP_WRITE[] = "mmap_write";                                                   // mmap mounting with write perm

WARNING:LONG_LINE: line over 80 characters
#72: FILE: security/provenance/type.c:72:
+static const char RL_STR_MMAP_READ_PRIVATE[] = "mmap_read_private";                                     // mmap private mounting with read perm

WARNING:LONG_LINE: line over 80 characters
#73: FILE: security/provenance/type.c:73:
+static const char RL_STR_MMAP_EXEC_PRIVATE[] = "mmap_exec_private";                                     // mmap private mounting with exec perm

WARNING:LONG_LINE: line over 80 characters
#74: FILE: security/provenance/type.c:74:
+static const char RL_STR_MMAP_WRITE_PRIVATE[] = "mmap_write_private";                                   // mmap private  mounting with write perm

WARNING:LONG_LINE: line over 80 characters
#75: FILE: security/provenance/type.c:75:
+static const char RL_STR_SH_READ[] = "sh_read";                                                         // sh_read operation

WARNING:LONG_LINE: line over 80 characters
#76: FILE: security/provenance/type.c:76:
+static const char RL_STR_PROC_READ[] = "memory_read";                                                   // read from process memory

WARNING:LONG_LINE: line over 80 characters
#77: FILE: security/provenance/type.c:77:
+static const char RL_STR_SND[] = "send";                                                                // send over socket

WARNING:LONG_LINE: line over 80 characters
#78: FILE: security/provenance/type.c:78:
+static const char RL_STR_SND_PACKET[] = "send_packet";                                                  // connect socket to packet on send operation

WARNING:LONG_LINE: line over 80 characters
#79: FILE: security/provenance/type.c:79:
+static const char RL_STR_SND_UNIX[] = "send_unix";                                                      // send over unix socket

WARNING:LONG_LINE: line over 80 characters
#80: FILE: security/provenance/type.c:80:
+static const char RL_STR_SND_MSG[] = "send_msg";                                                        // send message

WARNING:LONG_LINE: line over 80 characters
#81: FILE: security/provenance/type.c:81:
+static const char RL_STR_SND_MSG_Q[] = "send_msg_queue";                                                // send message to queue

WARNING:LONG_LINE: line over 80 characters
#82: FILE: security/provenance/type.c:82:
+static const char RL_STR_RCV[] = "receive";                                                             // receive socket operation

WARNING:LONG_LINE: line over 80 characters
#83: FILE: security/provenance/type.c:83:
+static const char RL_STR_RCV_PACKET[] = "receive_packet";                                               // connect packet to socket on receive operation

WARNING:LONG_LINE: line over 80 characters
#84: FILE: security/provenance/type.c:84:
+static const char RL_STR_RCV_UNIX[] = "receive_unix";                                                   // receive on unix socket

WARNING:LONG_LINE: line over 80 characters
#85: FILE: security/provenance/type.c:85:
+static const char RL_STR_RCV_MSG[] = "receive_msg";                                                     // receive message

WARNING:LONG_LINE: line over 80 characters
#86: FILE: security/provenance/type.c:86:
+static const char RL_STR_RCV_MSG_Q[] = "receive_msg_queue";                                             // receive message from queue

WARNING:LONG_LINE: line over 80 characters
#87: FILE: security/provenance/type.c:87:
+static const char RL_STR_PERM_READ[] = "perm_read";                                                     // check read permission

WARNING:LONG_LINE: line over 80 characters
#88: FILE: security/provenance/type.c:88:
+static const char RL_STR_PERM_WRITE[] = "perm_write";                                                   // check write permission

WARNING:LONG_LINE: line over 80 characters
#89: FILE: security/provenance/type.c:89:
+static const char RL_STR_PERM_EXEC[] = "perm_exec";                                                     // check exec permission

WARNING:LONG_LINE: line over 80 characters
#90: FILE: security/provenance/type.c:90:
+static const char RL_STR_PERM_APPEND[] = "perm_append";                                                 // check append permission

WARNING:LONG_LINE: line over 80 characters
#91: FILE: security/provenance/type.c:91:
+static const char RL_STR_TERMINATE_TASK[] = "terminate_task";                                           // created when task data structure is freed

WARNING:LONG_LINE: line over 80 characters
#92: FILE: security/provenance/type.c:92:
+static const char RL_STR_TERMINATE_PROC[] = "terminate_proc";                                           // created when cred data structure is freed

WARNING:LONG_LINE: line over 80 characters
#93: FILE: security/provenance/type.c:93:
+static const char RL_STR_FREED[] = "free";                                                              // created when an inode is freed

WARNING:LONG_LINE: line over 80 characters
#94: FILE: security/provenance/type.c:94:
+static const char RL_STR_ARG[] = "arg";                                                                 // connect arg value to process

WARNING:LONG_LINE: line over 80 characters
#95: FILE: security/provenance/type.c:95:
+static const char RL_STR_ENV[] = "env";                                                                 // connect env value to process

WARNING:LONG_LINE: line over 80 characters
#96: FILE: security/provenance/type.c:96:
+static const char RL_STR_LOG[] = "log";                                                                 // connect string to task

WARNING:LONG_LINE: line over 80 characters
#97: FILE: security/provenance/type.c:97:
+static const char RL_STR_SH_ATTACH_READ[] = "sh_attach_read";                                           // attach sh with read perm

WARNING:LONG_LINE: line over 80 characters
#98: FILE: security/provenance/type.c:98:
+static const char RL_STR_SH_ATTACH_WRITE[] = "sh_attach_write";                                         // attach sh with write perm

WARNING:LONG_LINE: line over 80 characters
#99: FILE: security/provenance/type.c:99:
+static const char RL_STR_SH_CREATE_READ[] = "sh_create_read";                                           // sh create with read perm

WARNING:LONG_LINE: line over 80 characters
#100: FILE: security/provenance/type.c:100:
+static const char RL_STR_SH_CREATE_WRITE[] = "sh_create_write";                                         // sh create with write perm

WARNING:LONG_LINE: line over 80 characters
#101: FILE: security/provenance/type.c:101:
+static const char RL_STR_LOAD_FILE[] = "load_file";                                                     // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#102: FILE: security/provenance/type.c:102:
+static const char RL_STR_RAN_ON[] = "ran_on";                                                           // task run on this machine

WARNING:LONG_LINE: line over 80 characters
#103: FILE: security/provenance/type.c:103:
+static const char RL_STR_LOAD_UNKNOWN[] = "load_unknown";                                               // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#104: FILE: security/provenance/type.c:104:
+static const char RL_STR_LOAD_FIRMWARE[] = "load_firmware";                                             // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#105: FILE: security/provenance/type.c:105:
+static const char RL_STR_LOAD_FIRMWARE_PREALLOC_BUFFER[] = "load_firmware_prealloc_buffer";             // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#106: FILE: security/provenance/type.c:106:
+static const char RL_STR_LOAD_MODULE[] = "load_module";                                                 // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#107: FILE: security/provenance/type.c:107:
+static const char RL_STR_LOAD_KEXEC_IMAGE[] = "load_kexec_image";                                       // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#108: FILE: security/provenance/type.c:108:
+static const char RL_STR_LOAD_KEXEC_INITRAMFS[] = "load_kexec_initramfs";                               // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#109: FILE: security/provenance/type.c:109:
+static const char RL_STR_LOAD_POLICY[] = "load_policy";                                                 // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#110: FILE: security/provenance/type.c:110:
+static const char RL_STR_LOAD_CERTIFICATE[] = "load_certificate";                                       // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#111: FILE: security/provenance/type.c:111:
+static const char RL_STR_LOAD_UNDEFINED[] = "load_undefined";                                           // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#112: FILE: security/provenance/type.c:112:
+static const char RL_STR_PTRACE_ATTACH[] = "ptrace_attach";                                             // ptrace attach effect on memory

WARNING:LONG_LINE: line over 80 characters
#113: FILE: security/provenance/type.c:113:
+static const char RL_STR_PTRACE_READ[] = "ptrace_read";                                                 // ptrace read from mem

WARNING:LONG_LINE: line over 80 characters
#114: FILE: security/provenance/type.c:114:
+static const char RL_STR_PTRACE_ATTACH_TASK[] = "ptrace_attach_task";                                   // write info via ptrace effect on task

WARNING:LONG_LINE: line over 80 characters
#115: FILE: security/provenance/type.c:115:
+static const char RL_STR_PTRACE_READ_TASK[] = "ptrace_read_task";                                       // read info via ptrace effect on task

WARNING:LONG_LINE_COMMENT: line over 80 characters
#118: FILE: security/provenance/type.c:118:
+static const char ND_STR_UNKNOWN[] = "unknown";                                 // unkown node type should normally not appear

WARNING:LONG_LINE_COMMENT: line over 80 characters
#119: FILE: security/provenance/type.c:119:
+static const char ND_STR_STR[] = "string";                                      // simple string used for disclosed log

WARNING:LONG_LINE_COMMENT: line over 80 characters
#120: FILE: security/provenance/type.c:120:
+static const char ND_STR_TASK[] = "task";                                       // represent a thread from user space POV

WARNING:LONG_LINE_COMMENT: line over 80 characters
#121: FILE: security/provenance/type.c:121:
+static const char ND_STR_INODE_UNKNOWN[] = "inode_unknown";                     // unknown inode type should normally not appear

WARNING:LONG_LINE_COMMENT: line over 80 characters
#122: FILE: security/provenance/type.c:122:
+static const char ND_STR_INODE_LINK[] = "link";                                 // link

WARNING:LONG_LINE_COMMENT: line over 80 characters
#123: FILE: security/provenance/type.c:123:
+static const char ND_STR_INODE_FILE[] = "file";                                 // standard file

WARNING:LONG_LINE_COMMENT: line over 80 characters
#124: FILE: security/provenance/type.c:124:
+static const char ND_STR_INODE_DIRECTORY[] = "directory";                       // directory

WARNING:LONG_LINE_COMMENT: line over 80 characters
#125: FILE: security/provenance/type.c:125:
+static const char ND_STR_INODE_CHAR[] = "char";                                 // character device

WARNING:LONG_LINE_COMMENT: line over 80 characters
#126: FILE: security/provenance/type.c:126:
+static const char ND_STR_INODE_BLOCK[] = "block";                               // block device

WARNING:LONG_LINE_COMMENT: line over 80 characters
#127: FILE: security/provenance/type.c:127:
+static const char ND_STR_INODE_PIPE[] = "pipe";                                 // pipe

WARNING:LONG_LINE_COMMENT: line over 80 characters
#128: FILE: security/provenance/type.c:128:
+static const char ND_STR_INODE_SOCKET[] = "socket";                             // network socket

WARNING:LONG_LINE_COMMENT: line over 80 characters
#129: FILE: security/provenance/type.c:129:
+static const char ND_STR_MSG[] = "msg";                                         // msg as in IPC message passing

WARNING:LONG_LINE_COMMENT: line over 80 characters
#130: FILE: security/provenance/type.c:130:
+static const char ND_STR_SHM[] = "shm";                                         // shared memory

WARNING:LONG_LINE_COMMENT: line over 80 characters
#131: FILE: security/provenance/type.c:131:
+static const char ND_STR_ADDR[] = "address";                                    // network address

WARNING:LONG_LINE_COMMENT: line over 80 characters
#132: FILE: security/provenance/type.c:132:
+static const char ND_STR_SB[] = "sb";                                           // superblock

WARNING:LONG_LINE_COMMENT: line over 80 characters
#133: FILE: security/provenance/type.c:133:
+static const char ND_STR_PATH[] = "path";                                       // path associated with a file

WARNING:LONG_LINE_COMMENT: line over 80 characters
#134: FILE: security/provenance/type.c:134:
+static const char ND_STR_DISC_ENTITY[] = "disc_entity";                         // descilosed node representing an entity

WARNING:LONG_LINE_COMMENT: line over 80 characters
#135: FILE: security/provenance/type.c:135:
+static const char ND_STR_DISC_ACTIVITY[] = "disc_activity";                     // descilosed node representing an activity

WARNING:LONG_LINE_COMMENT: line over 80 characters
#136: FILE: security/provenance/type.c:136:
+static const char ND_STR_DISC_AGENT[] = "disc_agent";                           // disclosed node representing an agent

WARNING:LONG_LINE_COMMENT: line over 80 characters
#137: FILE: security/provenance/type.c:137:
+static const char ND_STR_MACHINE[] = "machine";                                 // machine representing an agent

WARNING:LONG_LINE_COMMENT: line over 80 characters
#138: FILE: security/provenance/type.c:138:
+static const char ND_STR_PACKET[] = "packet";                                   // network packet

WARNING:LONG_LINE_COMMENT: line over 80 characters
#139: FILE: security/provenance/type.c:139:
+static const char ND_STR_IATTR[] = "iattr";                                     // inode attributes value

WARNING:LONG_LINE_COMMENT: line over 80 characters
#140: FILE: security/provenance/type.c:140:
+static const char ND_STR_XATTR[] = "xattr";                                     // extended attributes value

WARNING:LONG_LINE_COMMENT: line over 80 characters
#141: FILE: security/provenance/type.c:141:
+static const char ND_STR_PCKCNT[] = "packet_content";                           // the content of network packet

WARNING:LONG_LINE_COMMENT: line over 80 characters
#142: FILE: security/provenance/type.c:142:
+static const char ND_STR_ARG[] = "argv";                                        // argument passed to a process

WARNING:LONG_LINE_COMMENT: line over 80 characters
#143: FILE: security/provenance/type.c:143:
+static const char ND_STR_ENV[] = "envp";                                        // environment parameter

WARNING:LONG_LINE_COMMENT: line over 80 characters
#144: FILE: security/provenance/type.c:144:
+static const char ND_STR_PROC[] = "process_memory";                             // process memory

WARNING:LONG_LINE: line over 80 characters
#146: FILE: security/provenance/type.c:146:
+#define MATCH_AND_RETURN(str1, str2, v)    do { if (strcmp(str1, str2) == 0) return v; } while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#146: FILE: security/provenance/type.c:146:
+#define MATCH_AND_RETURN(str1, str2, v)    do { if (strcmp(str1, str2) == 0) return v; } while (0)

WARNING:LONG_LINE: line over 80 characters
#372: FILE: security/provenance/type.c:372:
+	MATCH_AND_RETURN(str, RL_STR_CONNECT_UNIX_STREAM, RL_CONNECT_UNIX_STREAM);

WARNING:LONG_LINE: line over 80 characters
#445: FILE: security/provenance/type.c:445:
+	MATCH_AND_RETURN(str, RL_STR_LOAD_FIRMWARE_PREALLOC_BUFFER, RL_LOAD_FIRMWARE_PREALLOC_BUFFER);

WARNING:LONG_LINE: line over 80 characters
#448: FILE: security/provenance/type.c:448:
+	MATCH_AND_RETURN(str, RL_STR_LOAD_KEXEC_INITRAMFS, RL_LOAD_KEXEC_INITRAMFS);

total: 0 errors, 133 warnings, 553 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/type.c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
