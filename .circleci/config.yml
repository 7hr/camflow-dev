version: 2.1
jobs:
  checkout:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - restore_cache:
         keys:
           - build-machine-{{ checksum "Makefile" }}
      - run:
          name: 'Prepare build environment...'
          command: |
            if [ -d "build/linux-stable" ]; then
              echo 'Build environment was cached.'
            else
              echo 'Build environment was not cached.'
              sudo apt-get update -qq
              sudo apt-get install -y apt-utils
              sudo apt-get install -y sudo
              sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev
              make prepare_kernel
              make save_space
            fi
      - save_cache:
          key: build-machine-{{ checksum "Makefile" }}
          paths:
            - build
      - persist_to_workspace:
          root: .
          paths: build

  doc:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cd ./scripts && make prepare'
      - run: 'cd ./scripts && make config'
      - run:
          command: 'cd ./scripts && make compile'
          no_output_timeout: '30m'
      - run: 'pwd'
      - run: 'cd ./scripts && make run'
      - run: 'cd ./scripts && cat syslist.txt'
      - run: 'make doc'
      - persist_to_workspace:
          root: .
          paths:
            - docs
            - scripts
  security:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_security_only'
  compile_default:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'make compile_kernel'
  compile_no_flow_friendly:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_SECURITY_FLOW_FRIENDLY=y/CONFIG_SECURITY_FLOW_FRIENDLY=n/" .config'
      - run: 'make compile_kernel'
  compile_whole:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/# CONFIG_SECURITY_PROVENANCE_WHOLE_SYSTEM is not set/CONFIG_SECURITY_PROVENANCE_WHOLE_SYSTEM=y/" .config'
      - run: 'make compile_kernel'
  compile_persist:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/# CONFIG_SECURITY_PROVENANCE_PERSISTENCE is not set/CONFIG_SECURITY_PROVENANCE_PERSISTENCE=y/" .config'
      - run: 'make compile_kernel'
  sparse:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cd build && git clone git://git.kernel.org/pub/scm/devel/sparse/sparse.git'
      - run: 'cd build/sparse && git checkout v0.6.1'
      - run: 'cd build/sparse && make'
      - run: 'cd build/sparse && sudo make install'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ./build/linux-stable && make C=2 security/provenance/ &>  ~/circulate/test/sparse.txt || true'
      - run: 'cat ./test/sparse.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/sparse.txt
  flawfinder:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install -y flawfinder'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ./build/linux-stable && flawfinder ./security/provenance > ~/circulate/test/flawfinder.txt'
      - run: 'cat ./test/flawfinder.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/flawfinder.txt
  checkpatch:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ./build/linux-stable && ./scripts/checkpatch.pl --show-types --file security/provenance/*.c > ~/circulate/test/checkpatch.txt || true'
      - run: 'cd ./build/linux-stable && ./scripts/checkpatch.pl --show-types --file security/provenance/include/*.h > ~/circulate/test/headers_checkpatch.txt || true'
      - run: 'cat ./test/checkpatch.txt'
      - run: 'cat ./test/headers_checkpatch.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/checkpatch.txt
            - test/headers_checkpatch.txt
  smatch:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'make prepare_smatch'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ./build/linux-stable && make clean'
      - run: 'cd ./build/linux-stable && make security CHECK="../smatch/smatch -p=kernel" C=1 >  ~/circulate/test/smatch.txt'
      - run: 'cat ./test/smatch.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/smatch.txt
  coccinelle:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install -y ocaml-native-compilers ocaml-findlib menhir libmenhir-ocaml-dev libpcre-ocaml-dev libparmap-ocaml-dev texlive-fonts-extra'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'sudo apt-get build-dep -y coccinelle'
      - run: 'cd build && git clone https://github.com/coccinelle/coccinelle.git'
      - run: 'cd build/coccinelle && git checkout 1.0.8'
      - run: 'cd build/coccinelle && make clean'
      - run: 'cd build/coccinelle && ./autogen'
      - run: 'cd build/coccinelle && ./configure'
      - run: 'cd build/coccinelle && make'
      - run: 'cd build/coccinelle && sudo make install'
      - run: 'cp -f scripts/.config build/linux-stable/'
      - run: 'make config_circle'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/" .config'
      - run: 'cd build/linux-stable && sed -i "s/CONFIG_RETPOLINE=y/CONFIG_RETPOLINE=n/" .config'
      - run: 'mkdir -p test'
      - run: 'cd ./build/linux-stable && sed -i "/options = --use-gitgrep/d" .cocciconfig'
      - run: 'cd ./build/linux-stable && make coccicheck MODE=report M=security/provenance > ~/circulate/test/cocci.txt || true'
      - run: 'cat ./test/cocci.txt'
      - persist_to_workspace:
          root: .
          paths:
            - test/cocci.txt
  tinkerbell:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y uncrustify rsync build-essential ruby python autoconf automake libtool libncurses5-dev libncursesw5-dev bc libssl-dev pkg-config zsh libelf-dev bison flex sqlite3 libsqlite3-dev'
      - run: 'sudo apt-get install --reinstall make'
      - run: 'cd scripts && make config_kernel'
      - run: 'cd build && git clone https://github.com/TinkerBellSystem/compiler'
      - run: 'cd build/compiler && git checkout thomas'
      - run: 'cd build/compiler && make prepare'
      - run: 'cd build/compiler && make config'
      - run: 'cd build/compiler && make compile'
      - run: 'cd build && git clone https://github.com/TinkerBellSystem/graph-matching'
      - run: 'cd build/graph-matching && git checkout thomas'
      - run: 'cd build/graph-matching && source venv/bin/activate'
      - run: 'cd build/graph-matching/scripts && make all'
      - run: 'cd build/graph-matching/scripts && make analyse'
      - persist_to_workspace:
          root: .
          paths:
            - test/cocci.txt
  deploy_dev:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/circulate
    steps:
      - checkout
      - attach_workspace:
          at: ~/circulate
      - run: 'sudo apt-get update -qq'
      - run: 'sudo apt-get install -y apt-utils'
      - run: 'sudo apt-get install -y sudo'
      - run: 'sudo apt-get install -y git rsync'
      - run: 'sudo apt-get install -y ruby'
      - run: 'ruby ./scripts/clean_test.rb'
      - run: 'cd test && ls'
      - deploy:
          name: Deploy
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git status
            ls -l ./docs/img
            ls -l ./docs/dot
            mkdir -p output
            cd output
            echo "Cloning..."
            git clone https://github.com/camflow/camflow-dev
            cd camflow-dev
            git checkout dev
            echo "Copying..."
            mkdir -p docs
            mkdir -p scripts
            mkdir -p test
            rsync -r ../../docs/ ./docs
            rsync -r ../../scripts/ ./scripts
            rsync -r ../../test/ ./test
            echo "Check files are there"
            ls -l ./docs/img
            ls -l ./docs/dot
            git status
            git add .
            git status
            # is there any change
            if ! git diff-index --exit-code --quiet HEAD; then
              echo 'Committing...'
              git commit -a -m "[ci skip] CircleCI automated documentation generation and testing, based on commit ${CIRCLE_SHA1}"
              git push -q https://${GH_TOKEN}@github.com/camflow/camflow-dev.git dev
            else
              echo 'Nothing to commit.'
            fi
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout
      - security:
          requires:
            - checkout
      - compile_default:
          requires:
            - security
      - compile_no_flow_friendly:
          requires:
            - security
      - compile_whole:
          requires:
            - security
      - compile_persist:
          requires:
            - security
      - doc:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - sparse:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - flawfinder:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - checkpatch:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - smatch:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - coccinelle:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - tinkerbell:
          requires:
            - compile_default
            - compile_no_flow_friendly
            - compile_whole
            - compile_persist
      - deploy_dev:
          filters:
            branches:
              only:
                - dev
          requires:
            - doc
            - sparse
            - flawfinder
            - checkpatch
            - smatch
            - coccinelle
