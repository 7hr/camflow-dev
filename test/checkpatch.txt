------------------------
security/provenance/fs.c
------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/fs.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#32: FILE: security/provenance/fs.c:32:
+#define declare_file_operations(ops_name, write_op, read_op)    static const struct file_operations ops_name = { \

WARNING:LONG_LINE: line over 80 characters
#33: FILE: security/provenance/fs.c:33:
+		.write = write_op,										 \

WARNING:LONG_LINE: line over 80 characters
#34: FILE: security/provenance/fs.c:34:
+		.read = read_op,										 \

WARNING:LONG_LINE: line over 80 characters
#35: FILE: security/provenance/fs.c:35:
+		.llseek = generic_file_llseek,									 \

WARNING:LONG_LINE: line over 80 characters
#38: FILE: security/provenance/fs.c:38:
+static ssize_t no_read(struct file *filp, char __user *buf, size_t count, loff_t *ppos)

WARNING:LONG_LINE: line over 80 characters
#82: FILE: security/provenance/fs.c:82:
+#define declare_write_flag_fcn(fcn_name, flag)          static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#82: FILE: security/provenance/fs.c:82:
+#define declare_write_flag_fcn(fcn_name, flag)          static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																	       \
+		return __write_flag(file, buf, count, ppos, &flag);										       \
+	}

WARNING:LONG_LINE: line over 80 characters
#83: FILE: security/provenance/fs.c:83:
+	{																	       \

WARNING:LONG_LINE: line over 80 characters
#84: FILE: security/provenance/fs.c:84:
+		return __write_flag(file, buf, count, ppos, &flag);										       \

WARNING:LONG_LINE: line over 80 characters
#86: FILE: security/provenance/fs.c:86:
+#define declare_read_flag_fcn(fcn_name, flag)           static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#86: FILE: security/provenance/fs.c:86:
+#define declare_read_flag_fcn(fcn_name, flag)           static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																	 \
+		return __read_flag(filp, buf, count, ppos, flag);										 \
+	}

WARNING:LONG_LINE: line over 80 characters
#87: FILE: security/provenance/fs.c:87:
+	{																	 \

WARNING:LONG_LINE: line over 80 characters
#88: FILE: security/provenance/fs.c:88:
+		return __read_flag(filp, buf, count, ppos, flag);										 \

WARNING:LONG_LINE: line over 80 characters
#102: FILE: security/provenance/fs.c:102:
+declare_write_flag_fcn(prov_write_compress_node, prov_policy.should_compress_node);

WARNING:LONG_LINE: line over 80 characters
#103: FILE: security/provenance/fs.c:103:
+declare_read_flag_fcn(prov_read_compress_node, prov_policy.should_compress_node);

WARNING:LONG_LINE: line over 80 characters
#104: FILE: security/provenance/fs.c:104:
+declare_file_operations(prov_compress_node_ops, prov_write_compress_node, prov_read_compress_node);

WARNING:LONG_LINE: line over 80 characters
#106: FILE: security/provenance/fs.c:106:
+declare_write_flag_fcn(prov_write_compress_edge, prov_policy.should_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#107: FILE: security/provenance/fs.c:107:
+declare_read_flag_fcn(prov_read_compress_edge, prov_policy.should_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#108: FILE: security/provenance/fs.c:108:
+declare_file_operations(prov_compress_edge_ops, prov_write_compress_edge, prov_read_compress_edge);

WARNING:LONG_LINE: line over 80 characters
#112: FILE: security/provenance/fs.c:112:
+declare_file_operations(prov_duplicate_ops, prov_write_duplicate, prov_read_duplicate);

WARNING:LONG_LINE: line over 80 characters
#148: FILE: security/provenance/fs.c:148:
+declare_file_operations(prov_machine_id_ops, prov_write_machine_id, prov_read_machine_id);

WARNING:LONG_LINE: line over 80 characters
#184: FILE: security/provenance/fs.c:184:
+declare_file_operations(prov_boot_id_ops, prov_write_boot_id, prov_read_boot_id);

WARNING:LONG_LINE: line over 80 characters
#201: FILE: security/provenance/fs.c:201:
+	if (prov_type(node) == ENT_DISC || prov_type(node) == ACT_DISC || prov_type(node) == AGT_DISC) {

WARNING:LONG_LINE: line over 80 characters
#205: FILE: security/provenance/fs.c:205:
+		__memcpy_ss(&node->disc_node_info.parent, sizeof(union prov_identifier), &prov_elt(tprov)->node_info.identifier, sizeof(union prov_identifier));

WARNING:LONG_LINE: line over 80 characters
#232: FILE: security/provenance/fs.c:232:
+	if (copy_to_user(buf, prov_elt(tprov)->task_info.disc, sizeof(struct disc_node_struct)))

WARNING:LONG_LINE: line over 80 characters
#256: FILE: security/provenance/fs.c:256:
+static inline void update_prov_config(union prov_elt *setting, uint8_t op, struct provenance *prov)

WARNING:LONG_LINE: line over 80 characters
#280: FILE: security/provenance/fs.c:280:
+		prov_bloom_merge(prov_taint(prov_elt(prov)), prov_taint(setting));

WARNING:LONG_LINE: line over 80 characters
#362: FILE: security/provenance/fs.c:362:
+#define declare_write_filter_fcn(fcn_name, filter)      static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#362: FILE: security/provenance/fs.c:362:
+#define declare_write_filter_fcn(fcn_name, filter)      static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																	       \
+		return __write_filter(file, buf, count, &filter);										       \
+	}

WARNING:LONG_LINE: line over 80 characters
#363: FILE: security/provenance/fs.c:363:
+	{																	       \

WARNING:LONG_LINE: line over 80 characters
#364: FILE: security/provenance/fs.c:364:
+		return __write_filter(file, buf, count, &filter);										       \

WARNING:LONG_LINE: line over 80 characters
#366: FILE: security/provenance/fs.c:366:
+#define declare_reader_filter_fcn(fcn_name, filter)     static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#366: FILE: security/provenance/fs.c:366:
+#define declare_reader_filter_fcn(fcn_name, filter)     static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																	 \
+		return __read_filter(filp, buf, count, filter);											 \
+	}

WARNING:LONG_LINE: line over 80 characters
#367: FILE: security/provenance/fs.c:367:
+	{																	 \

WARNING:LONG_LINE: line over 80 characters
#368: FILE: security/provenance/fs.c:368:
+		return __read_filter(filp, buf, count, filter);											 \

WARNING:LONG_LINE: line over 80 characters
#373: FILE: security/provenance/fs.c:373:
+declare_file_operations(prov_node_filter_ops, prov_write_node_filter, prov_read_node_filter);

WARNING:LONG_LINE: line over 80 characters
#375: FILE: security/provenance/fs.c:375:
+declare_write_filter_fcn(prov_write_derived_filter, prov_policy.prov_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#376: FILE: security/provenance/fs.c:376:
+declare_reader_filter_fcn(prov_read_derived_filter, prov_policy.prov_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#377: FILE: security/provenance/fs.c:377:
+declare_file_operations(prov_derived_filter_ops, prov_write_derived_filter, prov_read_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#379: FILE: security/provenance/fs.c:379:
+declare_write_filter_fcn(prov_write_generated_filter, prov_policy.prov_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#380: FILE: security/provenance/fs.c:380:
+declare_reader_filter_fcn(prov_read_generated_filter, prov_policy.prov_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#381: FILE: security/provenance/fs.c:381:
+declare_file_operations(prov_generated_filter_ops, prov_write_generated_filter, prov_read_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#385: FILE: security/provenance/fs.c:385:
+declare_file_operations(prov_used_filter_ops, prov_write_used_filter, prov_read_used_filter);

WARNING:LONG_LINE: line over 80 characters
#387: FILE: security/provenance/fs.c:387:
+declare_write_filter_fcn(prov_write_informed_filter, prov_policy.prov_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#388: FILE: security/provenance/fs.c:388:
+declare_reader_filter_fcn(prov_read_informed_filter, prov_policy.prov_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#389: FILE: security/provenance/fs.c:389:
+declare_file_operations(prov_informed_filter_ops, prov_write_informed_filter, prov_read_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#391: FILE: security/provenance/fs.c:391:
+declare_write_filter_fcn(prov_write_propagate_node_filter, prov_policy.prov_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#392: FILE: security/provenance/fs.c:392:
+declare_reader_filter_fcn(prov_read_propagate_node_filter, prov_policy.prov_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#393: FILE: security/provenance/fs.c:393:
+declare_file_operations(prov_propagate_node_filter_ops, prov_write_propagate_node_filter, prov_read_propagate_node_filter);

WARNING:LONG_LINE: line over 80 characters
#395: FILE: security/provenance/fs.c:395:
+declare_write_filter_fcn(prov_write_propagate_derived_filter, prov_policy.prov_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#396: FILE: security/provenance/fs.c:396:
+declare_reader_filter_fcn(prov_read_propagate_derived_filter, prov_policy.prov_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#397: FILE: security/provenance/fs.c:397:
+declare_file_operations(prov_propagate_derived_filter_ops, prov_write_propagate_derived_filter, prov_read_propagate_derived_filter);

WARNING:LONG_LINE: line over 80 characters
#399: FILE: security/provenance/fs.c:399:
+declare_write_filter_fcn(prov_write_propagate_generated_filter, prov_policy.prov_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#400: FILE: security/provenance/fs.c:400:
+declare_reader_filter_fcn(prov_read_propagate_generated_filter, prov_policy.prov_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#401: FILE: security/provenance/fs.c:401:
+declare_file_operations(prov_propagate_generated_filter_ops, prov_write_propagate_generated_filter, prov_read_propagate_generated_filter);

WARNING:LONG_LINE: line over 80 characters
#403: FILE: security/provenance/fs.c:403:
+declare_write_filter_fcn(prov_write_propagate_used_filter, prov_policy.prov_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#404: FILE: security/provenance/fs.c:404:
+declare_reader_filter_fcn(prov_read_propagate_used_filter, prov_policy.prov_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#405: FILE: security/provenance/fs.c:405:
+declare_file_operations(prov_propagate_used_filter_ops, prov_write_propagate_used_filter, prov_read_propagate_used_filter);

WARNING:LONG_LINE: line over 80 characters
#407: FILE: security/provenance/fs.c:407:
+declare_write_filter_fcn(prov_write_propagate_informed_filter, prov_policy.prov_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#408: FILE: security/provenance/fs.c:408:
+declare_reader_filter_fcn(prov_read_propagate_informed_filter, prov_policy.prov_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#409: FILE: security/provenance/fs.c:409:
+declare_file_operations(prov_propagate_informed_filter_ops, prov_write_propagate_informed_filter, prov_read_propagate_informed_filter);

WARNING:LONG_LINE: line over 80 characters
#467: FILE: security/provenance/fs.c:467:
+	__memcpy_ss(&msg->prov, sizeof(union prov_elt), prov_elt(prov), sizeof(union prov_elt));

WARNING:LONG_LINE: line over 80 characters
#476: FILE: security/provenance/fs.c:476:
+declare_file_operations(prov_process_ops, prov_write_process, prov_read_process);

WARNING:LONG_LINE: line over 80 characters
#490: FILE: security/provenance/fs.c:490:
+	if (copy_from_user(&(f->filter), buf, sizeof(struct prov_ipv4_filter))) {

WARNING:LONG_LINE: line over 80 characters
#518: FILE: security/provenance/fs.c:518:
+		if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct prov_ipv4_filter)))

WARNING:LONG_LINE: line over 80 characters
#526: FILE: security/provenance/fs.c:526:
+#define declare_write_ipv4_filter_fcn(fcn_name, filter)         static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#526: FILE: security/provenance/fs.c:526:
+#define declare_write_ipv4_filter_fcn(fcn_name, filter)         static ssize_t fcn_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{																		       \
+		return __write_ipv4_filter(file, buf, count, &filter);											       \
+	}

WARNING:LONG_LINE: line over 80 characters
#527: FILE: security/provenance/fs.c:527:
+	{																		       \

WARNING:LONG_LINE: line over 80 characters
#528: FILE: security/provenance/fs.c:528:
+		return __write_ipv4_filter(file, buf, count, &filter);											       \

WARNING:LONG_LINE: line over 80 characters
#530: FILE: security/provenance/fs.c:530:
+#define declare_reader_ipv4_filter_fcn(fcn_name, filter)        static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#530: FILE: security/provenance/fs.c:530:
+#define declare_reader_ipv4_filter_fcn(fcn_name, filter)        static ssize_t fcn_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{																		 \
+		return __read_ipv4_filter(filp, buf, count, &filter);											 \
+	}

WARNING:LONG_LINE: line over 80 characters
#531: FILE: security/provenance/fs.c:531:
+	{																		 \

WARNING:LONG_LINE: line over 80 characters
#532: FILE: security/provenance/fs.c:532:
+		return __read_ipv4_filter(filp, buf, count, &filter);											 \

WARNING:LONG_LINE: line over 80 characters
#535: FILE: security/provenance/fs.c:535:
+declare_write_ipv4_filter_fcn(prov_write_ipv4_ingress_filter, ingress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#536: FILE: security/provenance/fs.c:536:
+declare_reader_ipv4_filter_fcn(prov_read_ipv4_ingress_filter, ingress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#537: FILE: security/provenance/fs.c:537:
+declare_file_operations(prov_ipv4_ingress_filter_ops, prov_write_ipv4_ingress_filter, prov_read_ipv4_ingress_filter);

WARNING:LONG_LINE: line over 80 characters
#539: FILE: security/provenance/fs.c:539:
+declare_write_ipv4_filter_fcn(prov_write_ipv4_egress_filter, egress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#540: FILE: security/provenance/fs.c:540:
+declare_reader_ipv4_filter_fcn(prov_read_ipv4_egress_filter, egress_ipv4filters);

WARNING:LONG_LINE: line over 80 characters
#541: FILE: security/provenance/fs.c:541:
+declare_file_operations(prov_ipv4_egress_filter_ops, prov_write_ipv4_egress_filter, prov_read_ipv4_egress_filter);

WARNING:LONG_LINE: line over 80 characters
#579: FILE: security/provenance/fs.c:579:
+#define declare_generic_filter_write(function_name, filters, info, add_function, delete_function)	    \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#579: FILE: security/provenance/fs.c:579:
+#define declare_generic_filter_write(function_name, filters, info, add_function, delete_function)	    \
+	static ssize_t function_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \
+	{												    \
+		struct filters *s;									    \
+		if (count < sizeof(struct info)) {							    \
+			return -ENOMEM; }								    \
+		s = kzalloc(sizeof(struct filters), GFP_KERNEL);					    \
+		if (!s) {										    \
+			return -ENOMEM; }								    \
+		if (copy_from_user(&s->filter, buf, sizeof(struct info))) {				    \
+			kfree(s);									    \
+			return -EAGAIN;									    \
+		}											    \
+		if ((s->filter.op & PROV_SET_DELETE) != PROV_SET_DELETE) {				    \
+			add_function(s); }								    \
+		else {											    \
+			delete_function(s); }								    \
+		return sizeof(struct filters);								    \
+	}

WARNING:LONG_LINE: line over 80 characters
#580: FILE: security/provenance/fs.c:580:
+	static ssize_t function_name(struct file *file, const char __user *buf, size_t count, loff_t *ppos) \

WARNING:LONG_LINE: line over 80 characters
#581: FILE: security/provenance/fs.c:581:
+	{												    \

WARNING:LONG_LINE: line over 80 characters
#582: FILE: security/provenance/fs.c:582:
+		struct filters *s;									    \

WARNING:LONG_LINE: line over 80 characters
#583: FILE: security/provenance/fs.c:583:
+		if (count < sizeof(struct info)) {							    \

WARNING:LONG_LINE: line over 80 characters
#584: FILE: security/provenance/fs.c:584:
+			return -ENOMEM; }								    \

WARNING:LONG_LINE: line over 80 characters
#585: FILE: security/provenance/fs.c:585:
+		s = kzalloc(sizeof(struct filters), GFP_KERNEL);					    \

WARNING:LONG_LINE: line over 80 characters
#586: FILE: security/provenance/fs.c:586:
+		if (!s) {										    \

WARNING:LONG_LINE: line over 80 characters
#587: FILE: security/provenance/fs.c:587:
+			return -ENOMEM; }								    \

WARNING:LONG_LINE: line over 80 characters
#588: FILE: security/provenance/fs.c:588:
+		if (copy_from_user(&s->filter, buf, sizeof(struct info))) {				    \

WARNING:LONG_LINE: line over 80 characters
#589: FILE: security/provenance/fs.c:589:
+			kfree(s);									    \

WARNING:LONG_LINE: line over 80 characters
#590: FILE: security/provenance/fs.c:590:
+			return -EAGAIN;									    \

WARNING:LONG_LINE: line over 80 characters
#591: FILE: security/provenance/fs.c:591:
+		}											    \

WARNING:LONG_LINE: line over 80 characters
#592: FILE: security/provenance/fs.c:592:
+		if ((s->filter.op & PROV_SET_DELETE) != PROV_SET_DELETE) {				    \

WARNING:LONG_LINE: line over 80 characters
#593: FILE: security/provenance/fs.c:593:
+			add_function(s); }								    \

WARNING:LONG_LINE: line over 80 characters
#594: FILE: security/provenance/fs.c:594:
+		else {											    \

WARNING:LONG_LINE: line over 80 characters
#595: FILE: security/provenance/fs.c:595:
+			delete_function(s); }								    \

WARNING:LONG_LINE: line over 80 characters
#596: FILE: security/provenance/fs.c:596:
+		return sizeof(struct filters);								    \

WARNING:LONG_LINE: line over 80 characters
#599: FILE: security/provenance/fs.c:599:
+#define declare_generic_filter_read(function_name, filters, info)				      \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#599: FILE: security/provenance/fs.c:599:
+#define declare_generic_filter_read(function_name, filters, info)				      \
+	static ssize_t function_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \
+	{											      \
+		struct list_head *listentry, *listtmp;						      \
+		struct filters *tmp;								      \
+		size_t pos = 0;									      \
+		if (count < sizeof(struct info)) {						      \
+			return -ENOMEM; }							      \
+		list_for_each_safe(listentry, listtmp, &filters) {				      \
+			tmp = list_entry(listentry, struct filters, list);			      \
+			if (count < pos + sizeof(struct info)) {				      \
+				return -ENOMEM; }						      \
+			if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct info))) {	      \
+				return -EAGAIN; }						      \
+			pos += sizeof(struct info);						      \
+		}										      \
+		return pos;									      \
+	}

WARNING:LONG_LINE: line over 80 characters
#600: FILE: security/provenance/fs.c:600:
+	static ssize_t function_name(struct file *filp, char __user *buf, size_t count, loff_t *ppos) \

WARNING:LONG_LINE: line over 80 characters
#601: FILE: security/provenance/fs.c:601:
+	{											      \

WARNING:LONG_LINE: line over 80 characters
#602: FILE: security/provenance/fs.c:602:
+		struct list_head *listentry, *listtmp;						      \

WARNING:LONG_LINE: line over 80 characters
#603: FILE: security/provenance/fs.c:603:
+		struct filters *tmp;								      \

WARNING:LONG_LINE: line over 80 characters
#604: FILE: security/provenance/fs.c:604:
+		size_t pos = 0;									      \

WARNING:LONG_LINE: line over 80 characters
#605: FILE: security/provenance/fs.c:605:
+		if (count < sizeof(struct info)) {						      \

WARNING:LONG_LINE: line over 80 characters
#606: FILE: security/provenance/fs.c:606:
+			return -ENOMEM; }							      \

WARNING:LONG_LINE: line over 80 characters
#607: FILE: security/provenance/fs.c:607:
+		list_for_each_safe(listentry, listtmp, &filters) {				      \

WARNING:LONG_LINE: line over 80 characters
#608: FILE: security/provenance/fs.c:608:
+			tmp = list_entry(listentry, struct filters, list);			      \

WARNING:LONG_LINE: line over 80 characters
#609: FILE: security/provenance/fs.c:609:
+			if (count < pos + sizeof(struct info)) {				      \

WARNING:LONG_LINE: line over 80 characters
#610: FILE: security/provenance/fs.c:610:
+				return -ENOMEM; }						      \

WARNING:LONG_LINE: line over 80 characters
#611: FILE: security/provenance/fs.c:611:
+			if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct info))) {	      \

WARNING:LONG_LINE: line over 80 characters
#612: FILE: security/provenance/fs.c:612:
+				return -EAGAIN; }						      \

WARNING:LONG_LINE: line over 80 characters
#613: FILE: security/provenance/fs.c:613:
+			pos += sizeof(struct info);						      \

WARNING:LONG_LINE: line over 80 characters
#614: FILE: security/provenance/fs.c:614:
+		}										      \

WARNING:LONG_LINE: line over 80 characters
#615: FILE: security/provenance/fs.c:615:
+		return pos;									      \

WARNING:LONG_LINE: line over 80 characters
#618: FILE: security/provenance/fs.c:618:
+static ssize_t prov_write_secctx_filter(struct file *file, const char __user *buf,

WARNING:LONG_LINE: line over 80 characters
#635: FILE: security/provenance/fs.c:635:
+	security_secctx_to_secid(s->filter.secctx, s->filter.len, &s->filter.secid);

WARNING:LONG_LINE: line over 80 characters
#644: FILE: security/provenance/fs.c:644:
+declare_file_operations(prov_secctx_filter_ops, prov_write_secctx_filter, prov_read_secctx_filter);

WARNING:LONG_LINE: line over 80 characters
#646: FILE: security/provenance/fs.c:646:
+declare_generic_filter_write(prov_write_uid_filter, user_filters, userinfo, prov_uid_add_or_update, prov_uid_delete);

WARNING:LONG_LINE: line over 80 characters
#648: FILE: security/provenance/fs.c:648:
+declare_file_operations(prov_uid_filter_ops, prov_write_uid_filter, prov_read_uid_filter);

WARNING:LONG_LINE: line over 80 characters
#650: FILE: security/provenance/fs.c:650:
+declare_generic_filter_write(prov_write_gid_filter, group_filters, groupinfo, prov_gid_add_or_update, prov_gid_delete);

WARNING:LONG_LINE: line over 80 characters
#652: FILE: security/provenance/fs.c:652:
+declare_file_operations(prov_gid_filter_ops, prov_write_gid_filter, prov_read_gid_filter);

WARNING:LONG_LINE: line over 80 characters
#692: FILE: security/provenance/fs.c:692:
+		if (copy_to_user(buf + pos, &(tmp->filter), sizeof(struct nsinfo)))

WARNING:LONG_LINE: line over 80 characters
#698: FILE: security/provenance/fs.c:698:
+declare_file_operations(prov_ns_filter_ops, prov_write_ns_filter, prov_read_ns_filter);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#701: FILE: security/provenance/fs.c:701:
+ * @brief This function records a relation between a provenance node and a user supplied data, which is a transient node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#703: FILE: security/provenance/fs.c:703:
+ * This function allows the user to attach an annotation node to a provenance node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#704: FILE: security/provenance/fs.c:704:
+ * The relation between the two nodes is RL_LOG and the node of the user-supplied log is of type ENT_STR.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#706: FILE: security/provenance/fs.c:706:
+ * Therefore, once we have recorded the node, we will free the memory allocated for it.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#710: FILE: security/provenance/fs.c:710:
+ * @return Number of bytes copied. -ENOMEM if no memory can be allocated for the transient long provenance node. -EAGAIN if copying from userspace failed. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#713: FILE: security/provenance/fs.c:713:
+static inline int record_log(union prov_elt *tprov, const char __user *buf, size_t count)

WARNING:LONG_LINE_COMMENT: line over 80 characters
#725: FILE: security/provenance/fs.c:725:
+	str->str_info.str[count] = '\0';        // Make sure the string is null terminated.

WARNING:LONG_LINE: line over 80 characters
#761: FILE: security/provenance/fs.c:761:
+#define hash_filters(filters, filters_type, tmp, tmp_type)						 \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#761: FILE: security/provenance/fs.c:761:
+#define hash_filters(filters, filters_type, tmp, tmp_type)						 \
+	do {												 \
+		list_for_each_safe(listentry, listtmp, &filters) {					 \
+			tmp = list_entry(listentry, struct filters_type, list);				 \
+			rc = crypto_shash_update(hashdesc, (u8 *)&tmp->filter, sizeof(struct tmp_type)); \
+			if (rc) {									 \
+				pr_err("Provenance: error updating hash.");				 \
+				pos = -EAGAIN;								 \
+				goto out;								 \
+			}										 \
+		}											 \
+	} while (0)

WARNING:LONG_LINE: line over 80 characters
#762: FILE: security/provenance/fs.c:762:
+	do {												 \

WARNING:LONG_LINE: line over 80 characters
#763: FILE: security/provenance/fs.c:763:
+		list_for_each_safe(listentry, listtmp, &filters) {					 \

WARNING:LONG_LINE: line over 80 characters
#764: FILE: security/provenance/fs.c:764:
+			tmp = list_entry(listentry, struct filters_type, list);				 \

WARNING:LONG_LINE: line over 80 characters
#765: FILE: security/provenance/fs.c:765:
+			rc = crypto_shash_update(hashdesc, (u8 *)&tmp->filter, sizeof(struct tmp_type)); \

WARNING:LONG_LINE: line over 80 characters
#766: FILE: security/provenance/fs.c:766:
+			if (rc) {									 \

WARNING:LONG_LINE: line over 80 characters
#767: FILE: security/provenance/fs.c:767:
+				pr_err("Provenance: error updating hash.");				 \

WARNING:LONG_LINE: line over 80 characters
#768: FILE: security/provenance/fs.c:768:
+				pos = -EAGAIN;								 \

WARNING:LONG_LINE: line over 80 characters
#769: FILE: security/provenance/fs.c:769:
+				goto out;								 \

WARNING:LONG_LINE: line over 80 characters
#770: FILE: security/provenance/fs.c:770:
+			}										 \

WARNING:LONG_LINE: line over 80 characters
#771: FILE: security/provenance/fs.c:771:
+		}											 \

WARNING:LONG_LINE: line over 80 characters
#798: FILE: security/provenance/fs.c:798:
+	size = sizeof(struct shash_desc) + crypto_shash_descsize(policy_shash_tfm);

WARNING:LONG_LINE: line over 80 characters
#816: FILE: security/provenance/fs.c:816:
+	rc = crypto_shash_update(hashdesc, (u8 *)CAMFLOW_VERSION_STR, strnlen(CAMFLOW_VERSION_STR, 32));

WARNING:LONG_LINE: line over 80 characters
#822: FILE: security/provenance/fs.c:822:
+	rc = crypto_shash_update(hashdesc, (u8 *)CAMFLOW_COMMIT, strnlen(CAMFLOW_COMMIT, PROV_COMMIT_MAX_LENGTH));

WARNING:LONG_LINE: line over 80 characters
#828: FILE: security/provenance/fs.c:828:
+	rc = crypto_shash_update(hashdesc, (u8 *)&prov_policy, sizeof(struct capture_policy));

WARNING:LONG_LINE: line over 80 characters
#834: FILE: security/provenance/fs.c:834:
+	hash_filters(ingress_ipv4filters, ipv4_filters, ipv4_tmp, prov_ipv4_filter);

WARNING:LONG_LINE: line over 80 characters
#836: FILE: security/provenance/fs.c:836:
+	hash_filters(egress_ipv4filters, ipv4_filters, ipv4_tmp, prov_ipv4_filter);

WARNING:LONG_LINE: line over 80 characters
#879: FILE: security/provenance/fs.c:879:
+			strlcpy(type_info->str, relation_str(type_info->id), PROV_TYPE_STR_MAX_LEN);

WARNING:LONG_LINE: line over 80 characters
#884: FILE: security/provenance/fs.c:884:
+			strlcpy(type_info->str, node_str(type_info->id), PROV_TYPE_STR_MAX_LEN);

WARNING:LONG_LINE: line over 80 characters
#949: FILE: security/provenance/fs.c:949:
+#define prov_create_file(name, perm, fun_ptr)					      \

WARNING:LONG_LINE: line over 80 characters
#950: FILE: security/provenance/fs.c:950:
+	do {									      \

WARNING:LONG_LINE: line over 80 characters
#951: FILE: security/provenance/fs.c:951:
+		dentry = securityfs_create_file(name, perm, prov_dir, NULL, fun_ptr); \

WARNING:LONG_LINE: line over 80 characters
#952: FILE: security/provenance/fs.c:952:
+		provenance_mark_as_opaque_dentry(dentry);			      \

WARNING:LONG_LINE: line over 80 characters
#978: FILE: security/provenance/fs.c:978:
+	prov_create_file("propagate_derived_filter", 0644, &prov_propagate_derived_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#979: FILE: security/provenance/fs.c:979:
+	prov_create_file("propagate_generated_filter", 0644, &prov_propagate_generated_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#980: FILE: security/provenance/fs.c:980:
+	prov_create_file("propagate_used_filter", 0644, &prov_propagate_used_filter_ops);

WARNING:LONG_LINE: line over 80 characters
#981: FILE: security/provenance/fs.c:981:
+	prov_create_file("propagate_informed_filter", 0644, &prov_propagate_informed_filter_ops);

total: 0 errors, 161 warnings, 1003 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/fs.c has style problems, please review.
---------------------------
security/provenance/hooks.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/hooks.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#89: FILE: security/provenance/hooks.c:89:
+ * Record provenance relation RL_PROC_READ (by calling "uses_two" function) and RL_CLONE (by calling "informs" function).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#91: FILE: security/provenance/hooks.c:91:
+ * Since @cred is shared by all threads, we use @cred to save process's provenance,

WARNING:LONG_LINE: line over 80 characters
#118: FILE: security/provenance/hooks.c:118:
+				uses_two(RL_PROC_READ, cprov, tprov, NULL, clone_flags);

WARNING:LONG_LINE: line over 80 characters
#119: FILE: security/provenance/hooks.c:119:
+				informs(RL_CLONE, tprov, ntprov, NULL, clone_flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#129: FILE: security/provenance/hooks.c:129:
+ * Record provenance relation RL_TERMINATE_TASK by calling function "record_terminate".

WARNING:LONG_LINE_COMMENT: line over 80 characters
#149: FILE: security/provenance/hooks.c:149:
+ * We create a ENT_PROC provenance node, and set the UID and GID of the provenance node information from the current process's credential.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#150: FILE: security/provenance/hooks.c:150:
+ * Current process's cred struct's provenance pointer now points to the provenance node.

WARNING:LONG_LINE: line over 80 characters
#180: FILE: security/provenance/hooks.c:180:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#186: FILE: security/provenance/hooks.c:186:
+			rc = uses(RL_PTRACE_READ, ccprov, tprov, cprov, NULL, 0);

WARNING:LONG_LINE: line over 80 characters
#193: FILE: security/provenance/hooks.c:193:
+			rc = generates(RL_PTRACE_ATTACH, cprov, tprov, ccprov, NULL, 0);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#218: FILE: security/provenance/hooks.c:218:
+ * This hook is triggered when allocating sufficient memory and attaching to @cred such that cred_transfer() will not get ENOMEM.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#220: FILE: security/provenance/hooks.c:220:
+ * We simply create a ENT_PROC provenance node and associate the provenance entry to the newly allocated @cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#224: FILE: security/provenance/hooks.c:224:
+ * @return 0 if no error occurred; -ENOMEM if no memory can be allocated for the new provenance entry. Other error codes unknown.\

WARNING:LONG_LINE_COMMENT: line over 80 characters
#244: FILE: security/provenance/hooks.c:244:
+ * This hook is triggered when deallocating and clearing the cred->security field in a set of credentials.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#245: FILE: security/provenance/hooks.c:245:
+ * Record provenance relation RL_TERMINATE_PROC by calling "record_terminate" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#264: FILE: security/provenance/hooks.c:264:
+ * This hook is triggered when preparing a new set of credentials by copying the data from the old set.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#267: FILE: security/provenance/hooks.c:267:
+ * Information flows from old cred to the process that is preparing the new cred.

WARNING:LONG_LINE: line over 80 characters
#291: FILE: security/provenance/hooks.c:291:
+	spin_lock_irqsave_nested(prov_lock(old_prov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#293: FILE: security/provenance/hooks.c:293:
+		// Here we use current->provenance instead of calling get_task_provenance because at this point pid and vpid are not ready yet.

WARNING:LONG_LINE: line over 80 characters
#297: FILE: security/provenance/hooks.c:297:
+			rc = generates(RL_CLONE_MEM, old_prov, tprov, nprov, NULL, 0);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#307: FILE: security/provenance/hooks.c:307:
+ * This hook is triggered when transfering data from original creds to new creds.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#309: FILE: security/provenance/hooks.c:309:
+ * Information flow between cred's is captured when provenance_cred_prepare function is called.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#329: FILE: security/provenance/hooks.c:329:
+ * This hook is triggered when updating the module's state after setting one or more of the user

WARNING:LONG_LINE_COMMENT: line over 80 characters
#331: FILE: security/provenance/hooks.c:331:
+ * The @flags parameter indicates which of the set*uid system calls invoked this hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#334: FILE: security/provenance/hooks.c:334:
+ * Information flows from @old to current process and then eventually flows to @new (since modification should be made to @new instead of @current->cred).

WARNING:LONG_LINE: line over 80 characters
#353: FILE: security/provenance/hooks.c:353:
+	spin_lock_irqsave_nested(prov_lock(old_prov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#362: FILE: security/provenance/hooks.c:362:
+ * This hooks is triggered when checking permission before setting the process group identifier of the process @p to @pgid.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#363: FILE: security/provenance/hooks.c:363:
+ * @cprov is the cred provenance of the @current process, and @tprov is the task provenance of the @current process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#364: FILE: security/provenance/hooks.c:364:
+ * During "get_cred_provenance" and "get_task_provenance" functions, their provenances are updated too.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#365: FILE: security/provenance/hooks.c:365:
+ * We update process @p's cred provenance's pgid info as required by the trigger of the hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#367: FILE: security/provenance/hooks.c:367:
+ * Information flows from cred of the @current process, which sets the @pgid, to the current process, and eventually to the process @p whose @pgid is updated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#403: FILE: security/provenance/hooks.c:403:
+ * This hook is triggered when checking permission before sending signal @sig to @p.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#405: FILE: security/provenance/hooks.c:405:
+ * If @info is 1 or SI_FROMKERNEL(info) is true, then the signal should be viewed as coming from the kernel and should typically be permitted.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#406: FILE: security/provenance/hooks.c:406:
+ * SIGIO signals are handled separately by the send_sigiotask hook in file_security_ops.

WARNING:LONG_LINE: line over 80 characters
#415: FILE: security/provenance/hooks.c:415:
+static int provenance_task_kill(struct task_struct *p, struct kernel_siginfo *info,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#428: FILE: security/provenance/hooks.c:428:
+ * This hook is triggered when allocating and attaching a security structure to @inode->i_security.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#429: FILE: security/provenance/hooks.c:429:
+ * The i_security field is initialized to NULL when the inode structure is allocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#430: FILE: security/provenance/hooks.c:430:
+ * When i_security field is initialized, we also initialize i_provenance field of the inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#432: FILE: security/provenance/hooks.c:432:
+ * UUID information from @i_sb (superblock) is copied to the new inode's provenance entry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#433: FILE: security/provenance/hooks.c:433:
+ * We then call function "refresh_inode_provenance" to obtain more information about the inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#436: FILE: security/provenance/hooks.c:436:
+ * @return 0 if operation was successful; -ENOMEM if no memory can be allocated for the new inode provenance entry. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#452: FILE: security/provenance/hooks.c:452:
+	__memcpy_ss(prov_elt(iprov)->inode_info.sb_uuid, PROV_SBUUID_LEN, prov_elt(sprov)->sb_info.uuid, 16 * sizeof(uint8_t));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#460: FILE: security/provenance/hooks.c:460:
+ * This hook is triggered when deallocating the inode security structure and set @inode->i_security to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#484: FILE: security/provenance/hooks.c:484:
+ * Information flows from current process's cred's to the process, and eventually to the parent's inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#488: FILE: security/provenance/hooks.c:488:
+ * @return 0 if permission is granted; -ENOMEM if parent's inode's provenance entry is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#505: FILE: security/provenance/hooks.c:505:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#518: FILE: security/provenance/hooks.c:518:
+ * so a security module can use it to provide additional checking for existing Linux permission checks.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#519: FILE: security/provenance/hooks.c:519:
+ * Notice that this hook is called when a file is opened (as well as many other operations),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#520: FILE: security/provenance/hooks.c:520:
+ * whereas the file_security_ops permission hook is called when the actual read/write operations are performed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#524: FILE: security/provenance/hooks.c:524:
+ * 1. MAY_EXEC: record provenance relation RL_PERM_EXEC by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#525: FILE: security/provenance/hooks.c:525:
+ * 2. MAY_READ: record provenance relation MAY_READ by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#526: FILE: security/provenance/hooks.c:526:
+ * 3. MAY_APPEND: record provenance relation RL_PERM_APPEND by calling "uses" function, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#527: FILE: security/provenance/hooks.c:527:
+ * 4. MAY_WRITE: record provenance relation RL_PERM_WRITE by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#529: FILE: security/provenance/hooks.c:529:
+ * Information flows from @inode's provenance to the current process that attempts to access the inode, and eventually to the cred of the task.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#530: FILE: security/provenance/hooks.c:530:
+ * Provenance relation is not recorded if the inode to be access is private or if the inode's provenance entry does not exist.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#533: FILE: security/provenance/hooks.c:533:
+ * @return 0 if permission is granted; -ENOMEM if @inode's provenance does not exist. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#535: FILE: security/provenance/hooks.c:535:
+ * @todo We ignore inode that are PRIVATE (i.e., IS_PRIVATE is true). Private inodes are FS internals and we ignore for now.

WARNING:LONG_LINE: line over 80 characters
#559: FILE: security/provenance/hooks.c:559:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#590: FILE: security/provenance/hooks.c:590:
+ * This hook is triggered when checking permission before creating a new hard link to a file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#591: FILE: security/provenance/hooks.c:591:
+ * We obtain the provenance of current process and its cred, as well as provenance of inode or parent directory of new link.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#595: FILE: security/provenance/hooks.c:595:
+ * 1. From cred of the current process to the process, and eventually to the inode of parent directory of new link, and,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#596: FILE: security/provenance/hooks.c:596:
+ * 2. From cred of the current process to the process, and eventually to the dentry of the existing link to the file, and

WARNING:LONG_LINE_COMMENT: line over 80 characters
#597: FILE: security/provenance/hooks.c:597:
+ * 3. From the inode of parent directory of new link to the dentry of the existing link to the file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#601: FILE: security/provenance/hooks.c:601:
+ * @return 0 if permission is granted; -ENOMEM if either the dentry provenance of the existing link to the file or the inode provenance of the new parent directory of new link does not exist.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#603: FILE: security/provenance/hooks.c:603:
+ * @todo The information flow relations captured here is a bit weird. We need to double check the correctness.

WARNING:LONG_LINE: line over 80 characters
#622: FILE: security/provenance/hooks.c:622:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#651: FILE: security/provenance/hooks.c:651:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#662: FILE: security/provenance/hooks.c:662:
+ *	@dir contains the inode structure of parent directory of the symbolic link.

WARNING:LONG_LINE: line over 80 characters
#683: FILE: security/provenance/hooks.c:683:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#695: FILE: security/provenance/hooks.c:695:
+ * This hook is triggered when checking for permission to rename a file or directory.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#696: FILE: security/provenance/hooks.c:696:
+ * Information flow is the same as in the "provenance_inode_link" function so we call this function.

WARNING:LONG_LINE: line over 80 characters
#721: FILE: security/provenance/hooks.c:721:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#734: FILE: security/provenance/hooks.c:734:
+ * This hooks is triggered when checking permission before setting file attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#735: FILE: security/provenance/hooks.c:735:
+ * Note that the kernel call to notify_change is performed from several locations,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#736: FILE: security/provenance/hooks.c:736:
+ * whenever file attributes change (such as when a file is truncated, chown/chmod operations

WARNING:LONG_LINE_COMMENT: line over 80 characters
#738: FILE: security/provenance/hooks.c:738:
+ * We create a new provenance node ENT_IATTR, and update its information based on @iattr.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#741: FILE: security/provenance/hooks.c:741:
+ * Information flows from cred of the current process to the process, and eventually to the inode attribute to set the attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#742: FILE: security/provenance/hooks.c:742:
+ * Information also flows from inode attribute to the inode whose attributes are to be set.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#743: FILE: security/provenance/hooks.c:743:
+ * After relation is recorded, iattr provenance entry is freed (i.e., memory deallocated).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#747: FILE: security/provenance/hooks.c:747:
+ * @return 0 if permission is granted; -ENOMEM if inode provenance of the file is NULL; -ENOMEM if no memory can be allocated for a new ENT_IATTR provenance entry. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#777: FILE: security/provenance/hooks.c:777:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#794: FILE: security/provenance/hooks.c:794:
+ * This hook is triggered when checking permission before obtaining file attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#796: FILE: security/provenance/hooks.c:796:
+ * Information flows from the inode of the file to the calling process, and eventually to the process's cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#798: FILE: security/provenance/hooks.c:798:
+ * @return 0 if permission is granted; -ENOMEM if the provenance entry of the file is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#814: FILE: security/provenance/hooks.c:814:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#825: FILE: security/provenance/hooks.c:825:
+ * This hook is triggered when checking the permission to read the symbolic link.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#827: FILE: security/provenance/hooks.c:827:
+ * Information flows from the link file to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#829: FILE: security/provenance/hooks.c:829:
+ * @return 0 if permission is granted; -ENOMEM if the link file's provenance entry is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#845: FILE: security/provenance/hooks.c:845:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#856: FILE: security/provenance/hooks.c:856:
+ * The provenance extended attributes are set for an inode only if the @name of xattr is matched to be XATTR_NAME_PROVENANCE.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#862: FILE: security/provenance/hooks.c:862:
+ * @return 0 if no error occurred; -ENOMEM if size does not match. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#899: FILE: security/provenance/hooks.c:899:
+		prov_bloom_merge(prov_taint(prov_elt(prov)), prov_taint(setting));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#907: FILE: security/provenance/hooks.c:907:
+ * This hook is triggered when updating inode security field after successful setxattr operation.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#908: FILE: security/provenance/hooks.c:908:
+ * The relations are recorded through "record_write_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#911: FILE: security/provenance/hooks.c:911:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE: line over 80 characters
#938: FILE: security/provenance/hooks.c:938:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#940: FILE: security/provenance/hooks.c:940:
+	record_write_xattr(RL_SETXATTR, iprov, tprov, cprov, name, value, size, flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#949: FILE: security/provenance/hooks.c:949:
+ * This hook is triggered when checking permission before obtaining the extended attributes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#950: FILE: security/provenance/hooks.c:950:
+ * The relations are recorded through "record_read_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#952: FILE: security/provenance/hooks.c:952:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE_COMMENT: line over 80 characters
#956: FILE: security/provenance/hooks.c:956:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance is NULL; Other error codes inherited from "record_read_xattr" function or unknown.

WARNING:LONG_LINE: line over 80 characters
#974: FILE: security/provenance/hooks.c:974:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#985: FILE: security/provenance/hooks.c:985:
+ * This hook is triggered when checking permission before obtaining the list of extended attribute names for @dentry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#987: FILE: security/provenance/hooks.c:987:
+ * Information flows from inode (whose xattrs are of interests) to calling task process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#990: FILE: security/provenance/hooks.c:990:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance is NULL; Other error codes inherited from "uses" function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1005: FILE: security/provenance/hooks.c:1005:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1016: FILE: security/provenance/hooks.c:1016:
+ * This hook is triggered when checking permission before removing the extended attribute identified by @name for @dentry.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1017: FILE: security/provenance/hooks.c:1017:
+ * The relations are recorded through "record_write_xattr" function defined in provenance_inode.h file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1020: FILE: security/provenance/hooks.c:1020:
+ * 1. The name of the extended attribute is provenance (do not capture provenance of CamFlow provenance ops), or

WARNING:LONG_LINE: line over 80 characters
#1042: FILE: security/provenance/hooks.c:1042:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1044: FILE: security/provenance/hooks.c:1044:
+	rc = record_write_xattr(RL_RMVXATTR, iprov, tprov, cprov, name, NULL, 0, 0);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1054: FILE: security/provenance/hooks.c:1054:
+ * This hook allows us to retrieve a copy of the extended attribute representation of the security label

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1056: FILE: security/provenance/hooks.c:1056:
+ * Note that @name is the remainder of the attribute name after the security prefix has been removed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1059: FILE: security/provenance/hooks.c:1059:
+ * @param name The name of extended attribute, which must be provenance (or an error will be thrown).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1061: FILE: security/provenance/hooks.c:1061:
+ * @param alloc Specify if the call should return a value via the buffer or just the value length.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1062: FILE: security/provenance/hooks.c:1062:
+ * @return Size of the buffer on success, which in this case is the size of the provenance entry; -ENOMEM if inode provenance is NULL; -EOPNOTSUPP if name of the attribute is not provenance.

WARNING:LONG_LINE: line over 80 characters
#1083: FILE: security/provenance/hooks.c:1083:
+	__memcpy_ss(*buffer, sizeof(union prov_elt), prov_elt(iprov), sizeof(union prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1091: FILE: security/provenance/hooks.c:1091:
+ * This function copies the extended attribute of provenance associated with @inode into @buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1094: FILE: security/provenance/hooks.c:1094:
+ * If @buffer is not NULL and the length of the provenance attribute name is smaller than @buffer_size,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1096: FILE: security/provenance/hooks.c:1096:
+ * @param inode The inode whose provenance extended attribute is to be retrieved.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1120: FILE: security/provenance/hooks.c:1120:
+ * This hook is triggered when checking file permissions before accessing an open file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1122: FILE: security/provenance/hooks.c:1122:
+ * A security module can use this hook to perform additional checking on these operations,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1123: FILE: security/provenance/hooks.c:1123:
+ * e.g., to revalidate permissions on use to support privilege bracketing or policy changes.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1124: FILE: security/provenance/hooks.c:1124:
+ * Notice that this hook is used when the actual read/write operations are performed,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1125: FILE: security/provenance/hooks.c:1125:
+ * whereas the inode_security_ops hook is called when a file is opened (as well as many other operations).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1127: FILE: security/provenance/hooks.c:1127:
+ * Although this hook can be used to revalidate permissions for various system call operations that read or write files,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1136: FILE: security/provenance/hooks.c:1136:
+ * @return 0 if permission is granted; -ENOMEM if inode provenance is NULL. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#1154: FILE: security/provenance/hooks.c:1154:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1158: FILE: security/provenance/hooks.c:1158:
+			rc = generates(RL_WRITE, cprov, tprov, iprov, file, mask);

WARNING:LONG_LINE: line over 80 characters
#1185: FILE: security/provenance/hooks.c:1185:
+			rc = generates(RL_WRITE, cprov, tprov, iprov, file, mask);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1210: FILE: security/provenance/hooks.c:1210:
+ * @brief Record provenance when file_splice_pipe_to_pipe hook is triggered (splice system call).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1217: FILE: security/provenance/hooks.c:1217:
+ * @return 0 if no error occurred; -ENOMEM if either end of the file provenance entry is NULL; Other error code inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1220: FILE: security/provenance/hooks.c:1220:
+static int provenance_file_splice_pipe_to_pipe(struct file *in, struct file *out)

WARNING:LONG_LINE: line over 80 characters
#1234: FILE: security/provenance/hooks.c:1234:
+	spin_lock_irqsave_nested(prov_lock(inprov), irqflags, PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE: line over 80 characters
#1260: FILE: security/provenance/hooks.c:1260:
+	spin_lock_irqsave_nested(prov_lock(iprov), irqflags, PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE: line over 80 characters
#1263: FILE: security/provenance/hooks.c:1263:
+		rc = record_influences_kernel(RL_LOAD_UNKNOWN, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1266: FILE: security/provenance/hooks.c:1266:
+		rc = record_influences_kernel(RL_LOAD_FIRMWARE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1269: FILE: security/provenance/hooks.c:1269:
+		rc = record_influences_kernel(RL_LOAD_FIRMWARE_PREALLOC_BUFFER, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1272: FILE: security/provenance/hooks.c:1272:
+		rc = record_influences_kernel(RL_LOAD_MODULE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1275: FILE: security/provenance/hooks.c:1275:
+		rc = record_influences_kernel(RL_LOAD_KEXEC_IMAGE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1278: FILE: security/provenance/hooks.c:1278:
+		rc = record_influences_kernel(RL_LOAD_KEXEC_INITRAMFS, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1281: FILE: security/provenance/hooks.c:1281:
+		rc = record_influences_kernel(RL_LOAD_POLICY, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1284: FILE: security/provenance/hooks.c:1284:
+		rc = record_influences_kernel(RL_LOAD_CERTIFICATE, iprov, tprov, file);

WARNING:LONG_LINE: line over 80 characters
#1287: FILE: security/provenance/hooks.c:1287:
+		rc = record_influences_kernel(RL_LOAD_UNDEFINED, iprov, tprov, file);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1297: FILE: security/provenance/hooks.c:1297:
+ * This hook is triggered when saving open-time permission checking state for later use upon file_permission,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1300: FILE: security/provenance/hooks.c:1300:
+ * Information flows from inode of the file to be opened to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1303: FILE: security/provenance/hooks.c:1303:
+ * @return 0 if no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1318: FILE: security/provenance/hooks.c:1318:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1329: FILE: security/provenance/hooks.c:1329:
+ * This hook allows security modules to control the ability of a process to receive an open file descriptor via socket IPC.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1331: FILE: security/provenance/hooks.c:1331:
+ * Information flows from inode of the file being received to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1333: FILE: security/provenance/hooks.c:1333:
+ * @return 0 if permission is granted, no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1348: FILE: security/provenance/hooks.c:1348:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1376: FILE: security/provenance/hooks.c:1376:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1411: FILE: security/provenance/hooks.c:1411:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1429: FILE: security/provenance/hooks.c:1429:
+ * record provenance relation RL_MMAP_WRITE and/or RL_MMAP_READ and/or RL_MMAP_EXEC by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1433: FILE: security/provenance/hooks.c:1433:
+ * we create an additional provenance node to represent the private mapped inode by calling function "branch_mmap",

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1434: FILE: security/provenance/hooks.c:1434:
+ * record provenance relation RL_MMAP by calling "derives" function because information flows from the original mapped file to the private file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1436: FILE: security/provenance/hooks.c:1436:
+ * record provenance relation RL_MMAP_WRITE and/or RL_MMAP_READ and/or RL_MMAP_EXEC by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1437: FILE: security/provenance/hooks.c:1437:
+ * Information flows between the new private mmap node and calling process and its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1444: FILE: security/provenance/hooks.c:1444:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if the original file inode provenance entry is NULL; Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1465: FILE: security/provenance/hooks.c:1465:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1472: FILE: security/provenance/hooks.c:1472:
+			rc = uses(RL_MMAP_WRITE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1476: FILE: security/provenance/hooks.c:1476:
+			rc = uses(RL_MMAP_READ, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1480: FILE: security/provenance/hooks.c:1480:
+			rc = uses(RL_MMAP_EXEC, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1485: FILE: security/provenance/hooks.c:1485:
+			rc = uses(RL_MMAP_WRITE_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1489: FILE: security/provenance/hooks.c:1489:
+			rc = uses(RL_MMAP_READ_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE: line over 80 characters
#1493: FILE: security/provenance/hooks.c:1493:
+			rc = uses(RL_MMAP_EXEC_PRIVATE, iprov, tprov, cprov, file, flags);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1506: FILE: security/provenance/hooks.c:1506:
+ * We obtain the provenance entry of the mmap'ed file, and if it shows that the mmap'ed file is shared based on the flags,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1508: FILE: security/provenance/hooks.c:1508:
+ * Information flows from cred of the process that unmmaps the file to the mmap'ed file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1509: FILE: security/provenance/hooks.c:1509:
+ * Note that if the file to be unmmap'ed is private, the provenance of the mmap'ed file is short-lived and thus no longer exists.

WARNING:LONG_LINE: line over 80 characters
#1534: FILE: security/provenance/hooks.c:1534:
+			spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1535: FILE: security/provenance/hooks.c:1535:
+			spin_lock_nested(prov_lock(iprov), PROVENANCE_LOCK_INODE);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1547: FILE: security/provenance/hooks.c:1547:
+ * This hook is triggered when checking permission for an ioctl operation on @file.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1550: FILE: security/provenance/hooks.c:1550:
+ * When @arg represents a user space pointer, it should never be used by the security module.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1551: FILE: security/provenance/hooks.c:1551:
+ * Record provenance relation RL_WRITE_IOCTL by calling "generates" function and RL_READ_IOCTL by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1557: FILE: security/provenance/hooks.c:1557:
+ * @return 0 if permission is granted or no error occurred; -ENOMEM if the file inode provenance entry is NULL; Other error code inherited from generates/uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1574: FILE: security/provenance/hooks.c:1574:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1592: FILE: security/provenance/hooks.c:1592:
+ * This hooks allocates and attaches a security structure to the msg->security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1593: FILE: security/provenance/hooks.c:1593:
+ * The security field is initialized to NULL when the structure is first created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1594: FILE: security/provenance/hooks.c:1594:
+ * This function initializes and attaches a new provenance entry to the msg->provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1595: FILE: security/provenance/hooks.c:1595:
+ * We create a new provenance node ENT_MSG and update the information in the provenance entry from @msg.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1597: FILE: security/provenance/hooks.c:1597:
+ * Information flows from cred of the calling process to the task, and eventually to the newly created msg node.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1599: FILE: security/provenance/hooks.c:1599:
+ * @return 0 if operation was successful and permission is granted; -ENOMEM if no memory can be allocated for the new provenance entry; Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1616: FILE: security/provenance/hooks.c:1616:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1625: FILE: security/provenance/hooks.c:1625:
+ * This hook is triggered when deallocating the security structure for this message.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1626: FILE: security/provenance/hooks.c:1626:
+ * Free msg provenance entry when security structure for this message is deallocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1627: FILE: security/provenance/hooks.c:1627:
+ * If the msg has a valid provenance entry pointer (i.e., non-NULL), free the memory and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1644: FILE: security/provenance/hooks.c:1644:
+ * @brief Helper function for two security hooks: msg_queue_msgsnd and mq_timedsend.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1647: FILE: security/provenance/hooks.c:1647:
+ * Information flows from calling process's cred to the process, and eventually to msg.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1649: FILE: security/provenance/hooks.c:1649:
+ * @return 0 if no error occurred; Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1660: FILE: security/provenance/hooks.c:1660:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1671: FILE: security/provenance/hooks.c:1671:
+ * This hook is trigger when checking permission before a message, @msg, is enqueued on the message queue, @msq.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1676: FILE: security/provenance/hooks.c:1676:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgsnd function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1699: FILE: security/provenance/hooks.c:1699:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgsnd function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1714: FILE: security/provenance/hooks.c:1714:
+ * @brief Helper function for two security hooks: msg_queue_msgrcv and mq_timedreceive.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1717: FILE: security/provenance/hooks.c:1717:
+ * Information flows from msg to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1720: FILE: security/provenance/hooks.c:1720:
+ * @return 0 if no error occurred; Other error codes inherited from uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1730: FILE: security/provenance/hooks.c:1730:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1741: FILE: security/provenance/hooks.c:1741:
+ * This hook is triggered when checking permission before a message, @msg, is removed from the message queue, @msq.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1742: FILE: security/provenance/hooks.c:1742:
+ * The @target task structure contains a pointer to the process that will be receiving the message

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1746: FILE: security/provenance/hooks.c:1746:
+ * and then simply calls the helper function __mq_msgrcv to record the information flow.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1752: FILE: security/provenance/hooks.c:1752:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgrcv function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1774: FILE: security/provenance/hooks.c:1774:
+ * We simply calls the helper function __mq_msgrcv to record the information flow.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1778: FILE: security/provenance/hooks.c:1778:
+ * @return 0 if permission is granted. Other error codes inherited from __mq_msgrcv function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1795: FILE: security/provenance/hooks.c:1795:
+ * This hunk is triggered when allocating and attaching a security structure to the shp->shm_perm.security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1796: FILE: security/provenance/hooks.c:1796:
+ * The security field is initialized to NULL when the structure is first created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1797: FILE: security/provenance/hooks.c:1797:
+ * This function allocates and attaches a provenance entry to the shp->shm_perm.provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1799: FILE: security/provenance/hooks.c:1799:
+ * It also fills in some provenance information based on the information contained in @shp.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1801: FILE: security/provenance/hooks.c:1801:
+ * For read, information flows from shared memory to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1803: FILE: security/provenance/hooks.c:1803:
+ * For write, information flows from the calling process's cree to the process, and eventually to shared memory.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1805: FILE: security/provenance/hooks.c:1805:
+ * @return 0 if operation was successful and permission is granted, no error occurred. -ENOMEM if no memory can be allocated to create a new ENT_SHM provenance entry. Other error code inherited from uses and generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1822: FILE: security/provenance/hooks.c:1822:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1835: FILE: security/provenance/hooks.c:1835:
+ * This hook is triggered when deallocating the security struct for this memory segment.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1836: FILE: security/provenance/hooks.c:1836:
+ * We simply free the memory of the allocated provenance entry if it exists, and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1855: FILE: security/provenance/hooks.c:1855:
+ * This hook is triggered when checking permissions prior to allowing the shmat system call to attach the

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1860: FILE: security/provenance/hooks.c:1860:
+ * Information flows from shared memory to the calling process, and then eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1862: FILE: security/provenance/hooks.c:1862:
+ * Record provenance relation RL_SH_ATTACH_READ by calling "uses" function and RL_SH_ATTACH_WRITE by calling "uses" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1867: FILE: security/provenance/hooks.c:1867:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if shared memory provenance entry does not exist. Other error codes inherited from uses and generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#1870: FILE: security/provenance/hooks.c:1870:
+static int provenance_shm_shmat(struct kern_ipc_perm *shp, char __user *shmaddr, int shmflg)

WARNING:LONG_LINE: line over 80 characters
#1882: FILE: security/provenance/hooks.c:1882:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#1890: FILE: security/provenance/hooks.c:1890:
+		rc = generates(RL_SH_ATTACH_WRITE, cprov, tprov, sprov, NULL, shmflg);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1902: FILE: security/provenance/hooks.c:1902:
+ * This hook is triggered when detaching the shared memory segment from the address space of the calling process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1903: FILE: security/provenance/hooks.c:1903:
+ * The to-be-detached segment must be currently attached with shmaddr equal to the value returned by the attaching shmat() call.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1905: FILE: security/provenance/hooks.c:1905:
+ * Information flows from the calling process's cred to the process, and eventually to the shared memory.

WARNING:LONG_LINE: line over 80 characters
#1920: FILE: security/provenance/hooks.c:1920:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1931: FILE: security/provenance/hooks.c:1931:
+ * This hook is triggered when allocating and attaching a security structure to the sk->sk_security field,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1933: FILE: security/provenance/hooks.c:1933:
+ * This function therefore allocates and attaches @sk_provenance structure to @sk.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1934: FILE: security/provenance/hooks.c:1934:
+ * The provenance of the local stream socket is the same as the cred provenance of the calling process.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1938: FILE: security/provenance/hooks.c:1938:
+ * @return 0 if success and no error occurred; -ENOMEM if calling process's cred structure does not exist. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1958: FILE: security/provenance/hooks.c:1958:
+ * This hook allows a module to update or allocate a per-socket security structure.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1960: FILE: security/provenance/hooks.c:1960:
+ * but rather, the socket security information is stored in the associated inode.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1961: FILE: security/provenance/hooks.c:1961:
+ * Typically, the inode alloc_security hook will allocate and and attach security information to

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1964: FILE: security/provenance/hooks.c:1964:
+ * with additional information that wasn't available when the inode was allocated.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1966: FILE: security/provenance/hooks.c:1966:
+ * Information flows from the calling process's cred to the process, and eventually to the socket that is being created.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1968: FILE: security/provenance/hooks.c:1968:
+ * This is becasuse kernel socket is a form of communication between kernel and userspace.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#1975: FILE: security/provenance/hooks.c:1975:
+ * @return 0 if no error occurred; -ENOMEM if inode provenance entry does not exist. Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2002: FILE: security/provenance/hooks.c:2002:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE: line over 80 characters
#2010: FILE: security/provenance/hooks.c:2010:
+static int provenance_socket_socketpair(struct socket *socka, struct socket *sockb)

WARNING:LONG_LINE: line over 80 characters
#2026: FILE: security/provenance/hooks.c:2026:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2043: FILE: security/provenance/hooks.c:2043:
+ * This hook is triggered when checking permission before socket protocol layer bind operation is performed,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2044: FILE: security/provenance/hooks.c:2044:
+ * and the socket @sock is bound to the address specified in the @address parameter.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2045: FILE: security/provenance/hooks.c:2045:
+ * The function records the provenance relations if the calling process is not set to be opaque (i.e., should be recorded).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2048: FILE: security/provenance/hooks.c:2048:
+ * Information flows from the cred of the calling process to the process itself, and eventually to the socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2049: FILE: security/provenance/hooks.c:2049:
+ * If the address family is PF_INET (we only support IPv4 for now), we check if we should record the packet from the socket,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2055: FILE: security/provenance/hooks.c:2055:
+ * @return 0 if permission is granted and no error occurred; -EINVAL if socket address is longer than @addrlen; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2088: FILE: security/provenance/hooks.c:2088:
+ * This hook is triggered when checking permission before socket protocol layer connect operation

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2090: FILE: security/provenance/hooks.c:2090:
+ * This function is similar to the above provenance_socket_bind function, except that we

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2095: FILE: security/provenance/hooks.c:2095:
+ * @return 0 if permission is granted and no error occurred; -EINVAL if socket address is longer than @addrlen; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited or unknown.

WARNING:LONG_LINE: line over 80 characters
#2113: FILE: security/provenance/hooks.c:2113:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2133: FILE: security/provenance/hooks.c:2133:
+ * This hook is triggered when checking permission before socket protocol layer listen operation.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2137: FILE: security/provenance/hooks.c:2137:
+ * @return 0 if no error occurred; -ENOMEM if socket inode provenance entry does not exist. Other error codes inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2152: FILE: security/provenance/hooks.c:2152:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2163: FILE: security/provenance/hooks.c:2163:
+ * This hook is triggered when checking permission before accepting a new connection.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2164: FILE: security/provenance/hooks.c:2164:
+ * Note that the new socket, @newsock, has been created and some information copied to it,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2171: FILE: security/provenance/hooks.c:2171:
+ * Information flows from the new socket to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2174: FILE: security/provenance/hooks.c:2174:
+ * @return 0 if permission is granted and no error occurred; Other error codes inherited from derives and uses function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2188: FILE: security/provenance/hooks.c:2188:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2201: FILE: security/provenance/hooks.c:2201:
+ * @brief Record provenance when socket_sendmsg_always/socket_sendmsg hook is triggered.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2203: FILE: security/provenance/hooks.c:2203:
+ * This hook is triggered when checking permission before transmitting a message to another socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2205: FILE: security/provenance/hooks.c:2205:
+ * Information flows from the calling process's cred to the calling process, and eventually to the sending socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2206: FILE: security/provenance/hooks.c:2206:
+ * If sk_family is PF_UNIX (or any local communication) and sk_type is not SOCK_DGRAM,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2214: FILE: security/provenance/hooks.c:2214:
+ * @return 0 if permission is granted and no error occurred; -ENOMEM if the sending socket's provenance entry does not exist; Other error codes inherited from generates and derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2244: FILE: security/provenance/hooks.c:2244:
+	    sock->sk->sk_type != SOCK_DGRAM) {  // Datagram handled by unix_may_send hook.

WARNING:LONG_LINE: line over 80 characters
#2252: FILE: security/provenance/hooks.c:2252:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2268: FILE: security/provenance/hooks.c:2268:
+ * @brief Record provenance when socket_recvmsg_always/socket_recvmsg hook is triggered.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2270: FILE: security/provenance/hooks.c:2270:
+ * This hook is triggered when checking permission before receiving a message from a socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2271: FILE: security/provenance/hooks.c:2271:
+ * This function is similar to the above provenance_socket_sendmsg_always function except the direction is reversed.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2274: FILE: security/provenance/hooks.c:2274:
+ * Information flows from the sending socket (@peer) to the receiving socket (@sock).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2276: FILE: security/provenance/hooks.c:2276:
+ * Information flows from the receiving socket to the calling process, and eventually to its cred.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2281: FILE: security/provenance/hooks.c:2281:
+ * @return 0 if permission is granted, and no error occurred; -ENOMEM if the receiving socket's provenance entry does not exist; Other error codes inherited from uses and derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2313: FILE: security/provenance/hooks.c:2313:
+	    sock->sk->sk_type != SOCK_DGRAM) {             // datagran handled by unix_may_send

WARNING:LONG_LINE: line over 80 characters
#2321: FILE: security/provenance/hooks.c:2321:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2340: FILE: security/provenance/hooks.c:2340:
+ * This hooks is triggered when checking permissions on incoming network packets.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2341: FILE: security/provenance/hooks.c:2341:
+ * This hook is distinct from Netfilter's IP input hooks since it is the first time that

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2345: FILE: security/provenance/hooks.c:2345:
+ * create a packet provenance node and fill the provenance information of the node from @skb,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2351: FILE: security/provenance/hooks.c:2351:
+ * @return 0 if no error occurred; -ENOMEM if sk provenance does not exist. Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2393: FILE: security/provenance/hooks.c:2393:
+ * This hook is triggered when checking permissions before establishing a Unix domain stream connection b]etween @sock and @other.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2395: FILE: security/provenance/hooks.c:2395:
+ * Since this is simply to connect (no information should flow between the two local sockets yet),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2398: FILE: security/provenance/hooks.c:2398:
+ * Information flows from the calling process's cred to the task , and eventually to the sending socket.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2402: FILE: security/provenance/hooks.c:2402:
+ * @return 0 if permission is granted; Other error code inherited from generates function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2417: FILE: security/provenance/hooks.c:2417:
+	spin_lock_irqsave_nested(prov_lock(cprov), irqflags, PROVENANCE_LOCK_PROC);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2428: FILE: security/provenance/hooks.c:2428:
+ * This hook is triggered when checking permissions before connecting or sending datagrams from @sock to @other.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2430: FILE: security/provenance/hooks.c:2430:
+ * Information flows from the sending socket (@sock) to the receiving socket (@other).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2433: FILE: security/provenance/hooks.c:2433:
+ * @return 0 if permission is granted and no error occurred; Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE: line over 80 characters
#2448: FILE: security/provenance/hooks.c:2448:
+	spin_lock_irqsave_nested(prov_lock(iprov), irqflags, PROVENANCE_LOCK_SOCKET);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2459: FILE: security/provenance/hooks.c:2459:
+ * This hook is triggered when saving security information in the bprm->security field,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2460: FILE: security/provenance/hooks.c:2460:
+ * typically based on information about the bprm->file, for later use by the apply_creds hook.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2461: FILE: security/provenance/hooks.c:2461:
+ * This hook may also optionally check permissions (e.g. for transitions between security domains).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2462: FILE: security/provenance/hooks.c:2462:
+ * This hook may be called multiple times during a single execve, e.g. for interpreters.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2463: FILE: security/provenance/hooks.c:2463:
+ * The hook can tell whether it has already been called by checking to see if @bprm->security is non-NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2464: FILE: security/provenance/hooks.c:2464:
+ * If so, then the hook may decide either to retain the security information saved earlier or to replace it.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2470: FILE: security/provenance/hooks.c:2470:
+ * @return 0 if the hook is successful and permission is granted; -ENOMEM if bprm->cred's provenance does not exist. Other error codes inherited from derives function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2501: FILE: security/provenance/hooks.c:2501:
+ * It allows a check the @bprm->security value which is set in the preceding set_creds call.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2502: FILE: security/provenance/hooks.c:2502:
+ * The primary difference from set_creds is that the argv list and envp list are reliably available in @bprm.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2505: FILE: security/provenance/hooks.c:2505:
+ * If the inode of bprm->file is opaque, we set the bprm->cred to be opaque (i.e., do not track).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2506: FILE: security/provenance/hooks.c:2506:
+ * The relations between the bprm arguments and bprm->cred are recorded by calling record_args function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2508: FILE: security/provenance/hooks.c:2508:
+ * @return 0 if no error occurred; -ENOMEM if bprm->cred provenance does not exist. Other error codes inherited from record_args function or unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2535: FILE: security/provenance/hooks.c:2535:
+ * This hook is triggered when preparing to install the new security attributes of a process being transformed by an execve operation,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2548: FILE: security/provenance/hooks.c:2548:
+ * The old process gets the name of the new process by calling record_node_name function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2550: FILE: security/provenance/hooks.c:2550:
+ * the new process bprm->cred's provenance will therefore be opaque and we do not track any of the relations.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2572: FILE: security/provenance/hooks.c:2572:
+ * This hook is triggered when allocating and attaching a security structure to the sb->s_security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2574: FILE: security/provenance/hooks.c:2574:
+ * This function allocates and initializes a provenance structure to sb->s_provenance field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2578: FILE: security/provenance/hooks.c:2578:
+ * @return 0 if operation was successful; -ENOMEM if no memory can be allocated for a new provenance entry. Other error codes unknown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2598: FILE: security/provenance/hooks.c:2598:
+ * This hooks is triggered when deallocating and clearing the sb->s_security field.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2599: FILE: security/provenance/hooks.c:2599:
+ * This function frees the memory of the allocated provenance field and set the pointer to NULL.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2618: FILE: security/provenance/hooks.c:2618:
+ * This function will update the Universal Unique ID of the provenance entry of the device @sb->s_provenance once it is mounted.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2619: FILE: security/provenance/hooks.c:2619:
+ * We obtain this information from @sb if it exists, or we give it a random value.

WARNING:LONG_LINE: line over 80 characters
#2641: FILE: security/provenance/hooks.c:2641:
+		get_random_bytes(prov_elt(sbprov)->sb_info.uuid, 16 * sizeof(uint8_t));

WARNING:LONG_LINE: line over 80 characters
#2672: FILE: security/provenance/hooks.c:2672:
+	LSM_HOOK_INIT(ptrace_traceme,                           provenance_ptrace_traceme),

WARNING:LONG_LINE: line over 80 characters
#2675: FILE: security/provenance/hooks.c:2675:
+	LSM_HOOK_INIT(inode_alloc_security,     provenance_inode_alloc_security),

WARNING:LONG_LINE: line over 80 characters
#2706: FILE: security/provenance/hooks.c:2706:
+	LSM_HOOK_INIT(file_splice_pipe_to_pipe, provenance_file_splice_pipe_to_pipe),

WARNING:LONG_LINE: line over 80 characters
#2711: FILE: security/provenance/hooks.c:2711:
+	LSM_HOOK_INIT(msg_msg_alloc_security,   provenance_msg_msg_alloc_security),

WARNING:LONG_LINE: line over 80 characters
#2712: FILE: security/provenance/hooks.c:2712:
+	LSM_HOOK_INIT(msg_msg_free_security,    provenance_msg_msg_free_security),

WARNING:LONG_LINE: line over 80 characters
#2733: FILE: security/provenance/hooks.c:2733:
+	LSM_HOOK_INIT(socket_sendmsg_always,    provenance_socket_sendmsg_always),

WARNING:LONG_LINE: line over 80 characters
#2734: FILE: security/provenance/hooks.c:2734:
+	LSM_HOOK_INIT(socket_recvmsg_always,    provenance_socket_recvmsg_always),

WARNING:LONG_LINE: line over 80 characters
#2748: FILE: security/provenance/hooks.c:2748:
+	LSM_HOOK_INIT(bprm_committing_creds,    provenance_bprm_committing_creds),

WARNING:LONG_LINE: line over 80 characters
#2807: FILE: security/provenance/hooks.c:2807:
+						   sizeof(struct long_boot_buffer),

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2837: FILE: security/provenance/hooks.c:2837:
+ * 4. Set up kernel memory cache for regular provenance entries (NULL on failure).

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2845: FILE: security/provenance/hooks.c:2845:
+ * Work_queue helps persiste provenance of inodes (if needed) during the operations that cannot sleep,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#2846: FILE: security/provenance/hooks.c:2846:
+ * since persists provenance requires writing to disk (which means sleep is needed).

WARNING:LONG_LINE_STRING: line over 80 characters
#2872: FILE: security/provenance/hooks.c:2872:
+	security_add_hooks(provenance_hooks, ARRAY_SIZE(provenance_hooks), "provenance");       // Register provenance security hooks.

total: 0 errors, 322 warnings, 2882 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/hooks.c has style problems, please review.
-----------------------------
security/provenance/machine.c
-----------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/machine.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#23: FILE: security/provenance/machine.c:23:
+	__memcpy_ss(&(prov_machine->machine_info.utsname), sizeof(struct new_utsname), uname, sizeof(struct new_utsname));

WARNING:LONG_LINE: line over 80 characters
#36: FILE: security/provenance/machine.c:36:
+	__memcpy_ss(prov_machine->machine_info.commit, PROV_COMMIT_MAX_LENGTH, CAMFLOW_COMMIT, strnlen(CAMFLOW_COMMIT, PROV_COMMIT_MAX_LENGTH));

WARNING:LONG_LINE: line over 80 characters
#45: FILE: security/provenance/machine.c:45:
+	pr_info("Provenance: version %d.%d.%d", prov_machine->machine_info.cam_major, prov_machine->machine_info.cam_minor, prov_machine->machine_info.cam_patch);

WARNING:LONG_LINE: line over 80 characters
#47: FILE: security/provenance/machine.c:47:
+	pr_info("Provenance: sysname %s", prov_machine->machine_info.utsname.sysname);

WARNING:LONG_LINE: line over 80 characters
#48: FILE: security/provenance/machine.c:48:
+	pr_info("Provenance: nodename %s", prov_machine->machine_info.utsname.nodename);

WARNING:LONG_LINE: line over 80 characters
#49: FILE: security/provenance/machine.c:49:
+	pr_info("Provenance: release %s", prov_machine->machine_info.utsname.release);

WARNING:LONG_LINE: line over 80 characters
#50: FILE: security/provenance/machine.c:50:
+	pr_info("Provenance: version %s", prov_machine->machine_info.utsname.version);

WARNING:LONG_LINE: line over 80 characters
#51: FILE: security/provenance/machine.c:51:
+	pr_info("Provenance: machine %s", prov_machine->machine_info.utsname.machine);

WARNING:LONG_LINE: line over 80 characters
#52: FILE: security/provenance/machine.c:52:
+	pr_info("Provenance: domainname %s", prov_machine->machine_info.utsname.domainname);

total: 0 errors, 10 warnings, 53 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/machine.c has style problems, please review.
-------------------------------
security/provenance/memcpy_ss.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/memcpy_ss.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#15: FILE: security/provenance/memcpy_ss.c:15:
+#include <asm/bug.h>

WARNING:LONG_LINE: line over 80 characters
#21: FILE: security/provenance/memcpy_ss.c:21:
+int __memcpy_ss(void *dest, __kernel_size_t dmax, const void *src, __kernel_size_t smax)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#27: FILE: security/provenance/memcpy_ss.c:27:
+		pr_err("__memcpy_ss: dest is null.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#31: FILE: security/provenance/memcpy_ss.c:31:
+		pr_err("__memcpy_ss: dmax is 0.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#35: FILE: security/provenance/memcpy_ss.c:35:
+		pr_err("__memcpy_ss: dmax is too large.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#39: FILE: security/provenance/memcpy_ss.c:39:
+		pr_err("__memcpy_ss: sp is null.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#44: FILE: security/provenance/memcpy_ss.c:44:
+		pr_err("__memcpy_ss: smax is 0.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#49: FILE: security/provenance/memcpy_ss.c:49:
+		pr_err("__memcpy_ss: smax greater than dmax.");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__memcpy_ss', this function's name, in a string
#56: FILE: security/provenance/memcpy_ss.c:56:
+		pr_err("__memcpy_ss: dest and src overlap.");

total: 0 errors, 10 warnings, 62 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/memcpy_ss.c has style problems, please review.
-------------------------------
security/provenance/netfilter.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/netfilter.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#19: FILE: security/provenance/netfilter.c:19:
+ * @brief Record provenance of an outgoing packets, which is done through NetFilter (instead of LSM) hooks.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#21: FILE: security/provenance/netfilter.c:21:
+ * We record the provenance relation RL_SND_PACKET by calling "derives" function.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#24: FILE: security/provenance/netfilter.c:24:
+ * 1. The calling process cred's provenance (obtained from current_provenance) is not recorded or does not exist, or

WARNING:LONG_LINE: line over 80 characters
#75: FILE: security/provenance/netfilter.c:75:
+	return nf_register_net_hooks(net, provenance_nf_ops, ARRAY_SIZE(provenance_nf_ops));

WARNING:LONG_LINE: line over 80 characters
#80: FILE: security/provenance/netfilter.c:80:
+	nf_unregister_net_hooks(net, provenance_nf_ops, ARRAY_SIZE(provenance_nf_ops));

total: 0 errors, 6 warnings, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/netfilter.c has style problems, please review.
-------------------------------
security/provenance/propagate.c
-------------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/propagate.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

total: 0 errors, 1 warnings, 40 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/propagate.c has style problems, please review.
---------------------------
security/provenance/query.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/query.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

total: 0 errors, 1 warnings, 46 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/query.c has style problems, please review.
---------------------------
security/provenance/relay.c
---------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/relay.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE_COMMENT: line over 80 characters
#34: FILE: security/provenance/relay.c:34:
+	struct rchan *prov;             // Relay buffer for regular provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#35: FILE: security/provenance/relay.c:35:
+	struct rchan *long_prov;        // Relay buffer for long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#40: FILE: security/provenance/relay.c:40:
+ * @brief Add an element to the tail end of the relay list, which is identified by the "extern struct list_head relay_list" above.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#42: FILE: security/provenance/relay.c:42:
+ * @param prov Member of the element in the relay list. This is a relay channel pointer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#43: FILE: security/provenance/relay.c:43:
+ * @param long_prov Member of the element in the relay list. This is a relay channel pointer.

WARNING:LONG_LINE: line over 80 characters
#89: FILE: security/provenance/relay.c:89:
+			pr_warn("Provenance: relay (%s) on core %d is full.", chan->base_filename, cpu);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#98: FILE: security/provenance/relay.c:98:
+ * @brief Callback function of function "create_buf_file". This callback function creates relay file in "debugfs".

WARNING:LONG_LINE_COMMENT: line over 80 characters
#111: FILE: security/provenance/relay.c:111:
+ * @brief Callback function of function "remove_buf_file". This callback function removes the relay file from "debugfs".

WARNING:LONG_LINE: line over 80 characters
#143: FILE: security/provenance/relay.c:143:
+			cookie = async_schedule(__async_handle_boot_buffer, NULL);

WARNING:LONG_LINE: line over 80 characters
#144: FILE: security/provenance/relay.c:144:
+			pr_info("Provenance: schedlued boot buffer async task %llu.", cookie);

WARNING:LONG_LINE: line over 80 characters
#175: FILE: security/provenance/relay.c:175:
+	pr_info("Provenance: async long boot buffer task %llu running...", cookie);

WARNING:LONG_LINE: line over 80 characters
#184: FILE: security/provenance/relay.c:184:
+			cookie = async_schedule(__async_handle_long_boot_buffer, NULL);

WARNING:LONG_LINE: line over 80 characters
#185: FILE: security/provenance/relay.c:185:
+			pr_info("Provenance: schedlued long boot buffer async task %llu.", cookie);

WARNING:LONG_LINE: line over 80 characters
#194: FILE: security/provenance/relay.c:194:
+		relay_write(long_prov_chan, &(entry->msg), sizeof(union long_prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#207: FILE: security/provenance/relay.c:207:
+ * @brief Write whatever in boot buffer to relay buffer when relay buffer is ready.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#209: FILE: security/provenance/relay.c:209:
+ * This function writes what's in boot_buffer to relay buffer for regular provenance entries,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#212: FILE: security/provenance/relay.c:212:
+ * Once done, set boolean value relay_ready to true to signal that relay buffer is ready to be used.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: security/provenance/relay.c:215:
+void refresh_prov_machine(void);

WARNING:LONG_LINE: line over 80 characters
#231: FILE: security/provenance/relay.c:231:
+		pr_info("Provenance: schedlued boot buffer async task %llu.", cookie);

WARNING:LONG_LINE: line over 80 characters
#237: FILE: security/provenance/relay.c:237:
+		pr_info("Provenance: schedlued long boot buffer async task %llu.", cookie);

WARNING:LONG_LINE_COMMENT: line over 80 characters
#242: FILE: security/provenance/relay.c:242:
+ * @brief Create a provenance relay buffer channel for both regular and long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#245: FILE: security/provenance/relay.c:245:
+ * Each relay channel contains a relay buffer for regular provenance entries and a relay buffer for long provenance entries.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#246: FILE: security/provenance/relay.c:246:
+ * @param buffer Contains the name of the relay buffer for regular provenance entries (prepend "long_" for the relay buffer name for long provenance entries)

WARNING:LONG_LINE_COMMENT: line over 80 characters
#248: FILE: security/provenance/relay.c:248:
+ * @return 0 if no error occurred; -EFAULT if name already exists for relay buffer or opening new relay buffer failed; -ENOMEM if length of the name of the relay buffer is too long. Other error codes unknown.

WARNING:LONG_LINE: line over 80 characters
#271: FILE: security/provenance/relay.c:271:
+	chan = relay_open(buffer, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#276: FILE: security/provenance/relay.c:276:
+	long_chan = relay_open(long_name, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#290: FILE: security/provenance/relay.c:290:
+	struct boot_buffer *tmp = kmem_cache_zalloc(boot_buffer_cache, GFP_ATOMIC);

WARNING:LONG_LINE: line over 80 characters
#293: FILE: security/provenance/relay.c:293:
+	__memcpy_ss(&(tmp->msg), sizeof(union prov_elt), msg, sizeof(union prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#301: FILE: security/provenance/relay.c:301:
+ * @brief Write provenance information to relay buffer or to boot buffer if relay buffer is not ready yet during boot.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#303: FILE: security/provenance/relay.c:303:
+ * If in an unlikely event that relay is not ready, provenance information should be written to the boot buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#304: FILE: security/provenance/relay.c:304:
+ * However, in an unlikely event that the boot buffer is full, an error is thrown.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#305: FILE: security/provenance/relay.c:305:
+ * Otherwise (i.e., boot buffer is not full) provenance information is written to the next empty slot in the boot buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#307: FILE: security/provenance/relay.c:307:
+ * It will write to every relay buffer in the relay_list for every CamQuery query use.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#308: FILE: security/provenance/relay.c:308:
+ * This is because once provenance is read from a relay buffer, it will be consumed from the buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#309: FILE: security/provenance/relay.c:309:
+ * We therefore need to write to multiple relay buffers if we want to consume/use same provenance data multiple times.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#310: FILE: security/provenance/relay.c:310:
+ * @param msg Provenance information to be written to either boot buffer or relay buffer.

WARNING:LONG_LINE: line over 80 characters
#333: FILE: security/provenance/relay.c:333:
+	struct long_boot_buffer *tmp = kmem_cache_zalloc(long_boot_buffer_cache, GFP_ATOMIC);

WARNING:LONG_LINE: line over 80 characters
#336: FILE: security/provenance/relay.c:336:
+	__memcpy_ss(&(tmp->msg), sizeof(union long_prov_elt), msg, sizeof(union long_prov_elt));

WARNING:LONG_LINE_COMMENT: line over 80 characters
#344: FILE: security/provenance/relay.c:344:
+ * @brief Write long provenance information to relay buffer or to boot buffer if relay buffer is not ready yet during boot.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#346: FILE: security/provenance/relay.c:346:
+ * This function performs the same function as "prov_write" function except that it writes a long provenance information,

WARNING:LONG_LINE_COMMENT: line over 80 characters
#348: FILE: security/provenance/relay.c:348:
+ * @param msg Long provenance information to be written to either long boot buffer or long relay buffer.

WARNING:LONG_LINE_COMMENT: line over 80 characters
#371: FILE: security/provenance/relay.c:371:
+ * Initialize provenance relay buffer with a base relay buffer for regular provenance entries,

WARNING:LONG_LINE: line over 80 characters
#381: FILE: security/provenance/relay.c:381:
+	prov_chan = relay_open(PROV_BASE_NAME, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

WARNING:LONG_LINE: line over 80 characters
#385: FILE: security/provenance/relay.c:385:
+	long_prov_chan = relay_open(LONG_PROV_BASE_NAME, NULL, PROV_RELAY_BUFF_SIZE, PROV_NB_SUBBUF, &relay_callbacks, NULL);

total: 0 errors, 45 warnings, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/relay.c has style problems, please review.
--------------------------
security/provenance/type.c
--------------------------
WARNING:LONG_LINE_COMMENT: line over 80 characters
#3: FILE: security/provenance/type.c:3:
+ * Copyright (C) 2015-2019 University of Cambridge, Harvard University, University of Bristol

WARNING:LONG_LINE: line over 80 characters
#16: FILE: security/provenance/type.c:16:
+static const char RL_STR_UNKNOWN[] = "unknown";                                                         // unknown relation should not happen

WARNING:LONG_LINE: line over 80 characters
#17: FILE: security/provenance/type.c:17:
+static const char RL_STR_READ[] = "read";                                                               // read to inode

WARNING:LONG_LINE: line over 80 characters
#18: FILE: security/provenance/type.c:18:
+static const char RL_STR_READ_IOCTL[] = "read_ioctl";                                                   // ioctl read

WARNING:LONG_LINE: line over 80 characters
#19: FILE: security/provenance/type.c:19:
+static const char RL_STR_WRITE[] = "write";                                                             // write to inode

WARNING:LONG_LINE: line over 80 characters
#20: FILE: security/provenance/type.c:20:
+static const char RL_STR_WRITE_IOCTL[] = "write_ioctl";                                                 // ioctl write

WARNING:LONG_LINE: line over 80 characters
#21: FILE: security/provenance/type.c:21:
+static const char RL_STR_CLONE_MEM[] = "clone_mem";                                                     // memory copy on clone

WARNING:LONG_LINE: line over 80 characters
#22: FILE: security/provenance/type.c:22:
+static const char RL_STR_MSG_CREATE[] = "msg_create";                                                   // create msg (IPC message passing)

WARNING:LONG_LINE: line over 80 characters
#23: FILE: security/provenance/type.c:23:
+static const char RL_STR_SOCKET_CREATE[] = "socket_create";                                             // create socket

WARNING:LONG_LINE: line over 80 characters
#24: FILE: security/provenance/type.c:24:
+static const char RL_STR_SOCKET_PAIR_CREATE[] = "socket_pair_create";                                   // create socket pair

WARNING:LONG_LINE: line over 80 characters
#25: FILE: security/provenance/type.c:25:
+static const char RL_STR_INODE_CREATE[] = "inode_create";                                               // create inode

WARNING:LONG_LINE: line over 80 characters
#26: FILE: security/provenance/type.c:26:
+static const char RL_STR_SETUID[] = "setuid";                                                           // setuid

WARNING:LONG_LINE: line over 80 characters
#27: FILE: security/provenance/type.c:27:
+static const char RL_STR_SETGID[] = "setpgid";                                                          // setpgid

WARNING:LONG_LINE: line over 80 characters
#28: FILE: security/provenance/type.c:28:
+static const char RL_STR_GETGID[] = "getpgid";                                                          // getpgid

WARNING:LONG_LINE: line over 80 characters
#29: FILE: security/provenance/type.c:29:
+static const char RL_STR_SH_WRITE[] = "sh_write";                                                       // writing to shared state

WARNING:LONG_LINE: line over 80 characters
#30: FILE: security/provenance/type.c:30:
+static const char RL_STR_PROC_WRITE[] = "memory_write";                                                 // writing to process memory (i.e. shared between thread)

WARNING:LONG_LINE: line over 80 characters
#31: FILE: security/provenance/type.c:31:
+static const char RL_STR_BIND[] = "bind";                                                               // socket bind operation

WARNING:LONG_LINE: line over 80 characters
#32: FILE: security/provenance/type.c:32:
+static const char RL_STR_CONNECT[] = "connect";                                                         // socket connection operation

WARNING:LONG_LINE: line over 80 characters
#33: FILE: security/provenance/type.c:33:
+static const char RL_STR_CONNECT_UNIX_STREAM[] = "connect_unix_stream";                                 // unix stream socket connection operation

WARNING:LONG_LINE: line over 80 characters
#34: FILE: security/provenance/type.c:34:
+static const char RL_STR_LISTEN[] = "listen";                                                           // socket listen operation

WARNING:LONG_LINE: line over 80 characters
#35: FILE: security/provenance/type.c:35:
+static const char RL_STR_ACCEPT[] = "accept";                                                           // socket accept operation

WARNING:LONG_LINE: line over 80 characters
#36: FILE: security/provenance/type.c:36:
+static const char RL_STR_OPEN[] = "open";                                                               // file open operation

WARNING:LONG_LINE: line over 80 characters
#37: FILE: security/provenance/type.c:37:
+static const char RL_STR_FILE_RCV[] = "file_rcv";                                                       // open file descriptor recevied through IPC

WARNING:LONG_LINE: line over 80 characters
#38: FILE: security/provenance/type.c:38:
+static const char RL_STR_FILE_LOCK[] = "file_lock";                                                     // represent file lock operation

WARNING:LONG_LINE: line over 80 characters
#39: FILE: security/provenance/type.c:39:
+static const char RL_STR_FILE_SIGIO[] = "file_sigio";                                                   // represent IO signal

WARNING:LONG_LINE: line over 80 characters
#40: FILE: security/provenance/type.c:40:
+static const char RL_STR_VERSION[] = "version_entity";                                                  // connect version of entity object

WARNING:LONG_LINE: line over 80 characters
#41: FILE: security/provenance/type.c:41:
+static const char RL_STR_MUNMAP[] = "munmap";                                                           // munmap operation

WARNING:LONG_LINE: line over 80 characters
#42: FILE: security/provenance/type.c:42:
+static const char RL_STR_SHMDT[] = "shmdt";                                                             // shmdt operation

WARNING:LONG_LINE: line over 80 characters
#43: FILE: security/provenance/type.c:43:
+static const char RL_STR_LINK[] = "link";                                                               // create a link

WARNING:LONG_LINE: line over 80 characters
#44: FILE: security/provenance/type.c:44:
+static const char RL_STR_RENAME[] = "rename";                                                           // rename inode

WARNING:LONG_LINE: line over 80 characters
#45: FILE: security/provenance/type.c:45:
+static const char RL_STR_UNLINK[] = "unlink";                                                           // delete a link

WARNING:LONG_LINE: line over 80 characters
#46: FILE: security/provenance/type.c:46:
+static const char RL_STR_SYMLINK[] = "symlink";                                                         // create a symlink

WARNING:LONG_LINE: line over 80 characters
#47: FILE: security/provenance/type.c:47:
+static const char RL_STR_SPLICE_IN[] = "splice_in";                                                     // pipe splice operation from in file

WARNING:LONG_LINE: line over 80 characters
#48: FILE: security/provenance/type.c:48:
+static const char RL_STR_SPLICE_OUT[] = "splice_out";                                                   // pipe splice operation to out file

WARNING:LONG_LINE: line over 80 characters
#49: FILE: security/provenance/type.c:49:
+static const char RL_STR_SETATTR[] = "setattr";                                                         // setattr operation (task -> iattr)

WARNING:LONG_LINE: line over 80 characters
#50: FILE: security/provenance/type.c:50:
+static const char RL_STR_SETATTR_INODE[] = "setattr_inode";                                             // setattr operation (iattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#51: FILE: security/provenance/type.c:51:
+static const char RL_STR_ACCEPT_SOCKET[] = "accept_socket";                                             // accept operation (parent -> child socket)

WARNING:LONG_LINE: line over 80 characters
#52: FILE: security/provenance/type.c:52:
+static const char RL_STR_SETXATTR[] = "setxattr";                                                       // setxattr operation (task -> xattr)

WARNING:LONG_LINE: line over 80 characters
#53: FILE: security/provenance/type.c:53:
+static const char RL_STR_SETXATTR_INODE[] = "setxattr_inode";                                           // setxattr operation (xattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#54: FILE: security/provenance/type.c:54:
+static const char RL_STR_RMVXATTR[] = "removexattr";                                                    // remove xattr operation (task -> xattr)

WARNING:LONG_LINE: line over 80 characters
#55: FILE: security/provenance/type.c:55:
+static const char RL_STR_RMVXATTR_INODE[] = "removexattr_inode";                                        // remove xattr operation (xattr -> inode)

WARNING:LONG_LINE: line over 80 characters
#56: FILE: security/provenance/type.c:56:
+static const char RL_STR_NAMED[] = "named";                                                             // connect path to inode

WARNING:LONG_LINE: line over 80 characters
#57: FILE: security/provenance/type.c:57:
+static const char RL_STR_ADDRESSED[] = "addressed";                                                     // connect address to inode

WARNING:LONG_LINE: line over 80 characters
#58: FILE: security/provenance/type.c:58:
+static const char RL_STR_EXEC[] = "exec";                                                               // exec operation

WARNING:LONG_LINE: line over 80 characters
#59: FILE: security/provenance/type.c:59:
+static const char RL_STR_EXEC_TASK[] = "exec_task";                                                     // exec operation

WARNING:LONG_LINE: line over 80 characters
#60: FILE: security/provenance/type.c:60:
+static const char RL_STR_PCK_CNT[] = "packet_content";                                                  // connect netwrok packet to its content

WARNING:LONG_LINE: line over 80 characters
#61: FILE: security/provenance/type.c:61:
+static const char RL_STR_CLONE[] = "clone";                                                             // clone operation

WARNING:LONG_LINE: line over 80 characters
#62: FILE: security/provenance/type.c:62:
+static const char RL_STR_VERSION_TASK[] = "version_activity";                                           // connection two versions of an activity

WARNING:LONG_LINE: line over 80 characters
#63: FILE: security/provenance/type.c:63:
+static const char RL_STR_SEARCH[] = "search";                                                           // search operation on directory

WARNING:LONG_LINE: line over 80 characters
#64: FILE: security/provenance/type.c:64:
+static const char RL_STR_GETATTR[] = "getattr";                                                         // getattr operation

WARNING:LONG_LINE: line over 80 characters
#65: FILE: security/provenance/type.c:65:
+static const char RL_STR_GETXATTR[] = "getxattr";                                                       // getxattr operation (xattr -> process)

WARNING:LONG_LINE: line over 80 characters
#66: FILE: security/provenance/type.c:66:
+static const char RL_STR_GETXATTR_INODE[] = "getxattr_inode";                                           // getxattr operation (inode -> xattr)

WARNING:LONG_LINE: line over 80 characters
#67: FILE: security/provenance/type.c:67:
+static const char RL_STR_LSTXATTR[] = "listxattr";                                                      // listxattr operation

WARNING:LONG_LINE: line over 80 characters
#68: FILE: security/provenance/type.c:68:
+static const char RL_STR_READ_LINK[] = "read_link";                                                     // readlink operation

WARNING:LONG_LINE: line over 80 characters
#69: FILE: security/provenance/type.c:69:
+static const char RL_STR_MMAP_READ[] = "mmap_read";                                                     // mmap mounting with read perm

WARNING:LONG_LINE: line over 80 characters
#70: FILE: security/provenance/type.c:70:
+static const char RL_STR_MMAP_EXEC[] = "mmap_exec";                                                     // mmap mounting with exec perm

WARNING:LONG_LINE: line over 80 characters
#71: FILE: security/provenance/type.c:71:
+static const char RL_STR_MMAP_WRITE[] = "mmap_write";                                                   // mmap mounting with write perm

WARNING:LONG_LINE: line over 80 characters
#72: FILE: security/provenance/type.c:72:
+static const char RL_STR_MMAP_READ_PRIVATE[] = "mmap_read_private";                                     // mmap private mounting with read perm

WARNING:LONG_LINE: line over 80 characters
#73: FILE: security/provenance/type.c:73:
+static const char RL_STR_MMAP_EXEC_PRIVATE[] = "mmap_exec_private";                                     // mmap private mounting with exec perm

WARNING:LONG_LINE: line over 80 characters
#74: FILE: security/provenance/type.c:74:
+static const char RL_STR_MMAP_WRITE_PRIVATE[] = "mmap_write_private";                                   // mmap private  mounting with write perm

WARNING:LONG_LINE: line over 80 characters
#75: FILE: security/provenance/type.c:75:
+static const char RL_STR_SH_READ[] = "sh_read";                                                         // sh_read operation

WARNING:LONG_LINE: line over 80 characters
#76: FILE: security/provenance/type.c:76:
+static const char RL_STR_PROC_READ[] = "memory_read";                                                   // read from process memory

WARNING:LONG_LINE: line over 80 characters
#77: FILE: security/provenance/type.c:77:
+static const char RL_STR_SND[] = "send";                                                                // send over socket

WARNING:LONG_LINE: line over 80 characters
#78: FILE: security/provenance/type.c:78:
+static const char RL_STR_SND_PACKET[] = "send_packet";                                                  // connect socket to packet on send operation

WARNING:LONG_LINE: line over 80 characters
#79: FILE: security/provenance/type.c:79:
+static const char RL_STR_SND_UNIX[] = "send_unix";                                                      // send over unix socket

WARNING:LONG_LINE: line over 80 characters
#80: FILE: security/provenance/type.c:80:
+static const char RL_STR_SND_MSG[] = "send_msg";                                                        // send message

WARNING:LONG_LINE: line over 80 characters
#81: FILE: security/provenance/type.c:81:
+static const char RL_STR_SND_MSG_Q[] = "send_msg_queue";                                                // send message to queue

WARNING:LONG_LINE: line over 80 characters
#82: FILE: security/provenance/type.c:82:
+static const char RL_STR_RCV[] = "receive";                                                             // receive socket operation

WARNING:LONG_LINE: line over 80 characters
#83: FILE: security/provenance/type.c:83:
+static const char RL_STR_RCV_PACKET[] = "receive_packet";                                               // connect packet to socket on receive operation

WARNING:LONG_LINE: line over 80 characters
#84: FILE: security/provenance/type.c:84:
+static const char RL_STR_RCV_UNIX[] = "receive_unix";                                                   // receive on unix socket

WARNING:LONG_LINE: line over 80 characters
#85: FILE: security/provenance/type.c:85:
+static const char RL_STR_RCV_MSG[] = "receive_msg";                                                     // receive message

WARNING:LONG_LINE: line over 80 characters
#86: FILE: security/provenance/type.c:86:
+static const char RL_STR_RCV_MSG_Q[] = "receive_msg_queue";                                             // receive message from queue

WARNING:LONG_LINE: line over 80 characters
#87: FILE: security/provenance/type.c:87:
+static const char RL_STR_PERM_READ[] = "perm_read";                                                     // check read permission

WARNING:LONG_LINE: line over 80 characters
#88: FILE: security/provenance/type.c:88:
+static const char RL_STR_PERM_WRITE[] = "perm_write";                                                   // check write permission

WARNING:LONG_LINE: line over 80 characters
#89: FILE: security/provenance/type.c:89:
+static const char RL_STR_PERM_EXEC[] = "perm_exec";                                                     // check exec permission

WARNING:LONG_LINE: line over 80 characters
#90: FILE: security/provenance/type.c:90:
+static const char RL_STR_PERM_APPEND[] = "perm_append";                                                 // check append permission

WARNING:LONG_LINE: line over 80 characters
#91: FILE: security/provenance/type.c:91:
+static const char RL_STR_TERMINATE_TASK[] = "terminate_task";                                           // created when task data structure is freed

WARNING:LONG_LINE: line over 80 characters
#92: FILE: security/provenance/type.c:92:
+static const char RL_STR_TERMINATE_PROC[] = "terminate_proc";                                           // created when cred data structure is freed

WARNING:LONG_LINE: line over 80 characters
#93: FILE: security/provenance/type.c:93:
+static const char RL_STR_FREED[] = "free";                                                              // created when an inode is freed

WARNING:LONG_LINE: line over 80 characters
#94: FILE: security/provenance/type.c:94:
+static const char RL_STR_ARG[] = "arg";                                                                 // connect arg value to process

WARNING:LONG_LINE: line over 80 characters
#95: FILE: security/provenance/type.c:95:
+static const char RL_STR_ENV[] = "env";                                                                 // connect env value to process

WARNING:LONG_LINE: line over 80 characters
#96: FILE: security/provenance/type.c:96:
+static const char RL_STR_LOG[] = "log";                                                                 // connect string to task

WARNING:LONG_LINE: line over 80 characters
#97: FILE: security/provenance/type.c:97:
+static const char RL_STR_SH_ATTACH_READ[] = "sh_attach_read";                                           // attach sh with read perm

WARNING:LONG_LINE: line over 80 characters
#98: FILE: security/provenance/type.c:98:
+static const char RL_STR_SH_ATTACH_WRITE[] = "sh_attach_write";                                         // attach sh with write perm

WARNING:LONG_LINE: line over 80 characters
#99: FILE: security/provenance/type.c:99:
+static const char RL_STR_SH_CREATE_READ[] = "sh_create_read";                                           // sh create with read perm

WARNING:LONG_LINE: line over 80 characters
#100: FILE: security/provenance/type.c:100:
+static const char RL_STR_SH_CREATE_WRITE[] = "sh_create_write";                                         // sh create with write perm

WARNING:LONG_LINE: line over 80 characters
#101: FILE: security/provenance/type.c:101:
+static const char RL_STR_LOAD_FILE[] = "load_file";                                                     // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#102: FILE: security/provenance/type.c:102:
+static const char RL_STR_RAN_ON[] = "ran_on";                                                           // task run on this machine

WARNING:LONG_LINE: line over 80 characters
#103: FILE: security/provenance/type.c:103:
+static const char RL_STR_LOAD_UNKNOWN[] = "load_unknown";                                               // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#104: FILE: security/provenance/type.c:104:
+static const char RL_STR_LOAD_FIRMWARE[] = "load_firmware";                                             // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#105: FILE: security/provenance/type.c:105:
+static const char RL_STR_LOAD_FIRMWARE_PREALLOC_BUFFER[] = "load_firmware_prealloc_buffer";             // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#106: FILE: security/provenance/type.c:106:
+static const char RL_STR_LOAD_MODULE[] = "load_module";                                                 // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#107: FILE: security/provenance/type.c:107:
+static const char RL_STR_LOAD_KEXEC_IMAGE[] = "load_kexec_image";                                       // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#108: FILE: security/provenance/type.c:108:
+static const char RL_STR_LOAD_KEXEC_INITRAMFS[] = "load_kexec_initramfs";                               // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#109: FILE: security/provenance/type.c:109:
+static const char RL_STR_LOAD_POLICY[] = "load_policy";                                                 // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#110: FILE: security/provenance/type.c:110:
+static const char RL_STR_LOAD_CERTIFICATE[] = "load_certificate";                                       // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#111: FILE: security/provenance/type.c:111:
+static const char RL_STR_LOAD_UNDEFINED[] = "load_undefined";                                           // load file into kernel

WARNING:LONG_LINE: line over 80 characters
#112: FILE: security/provenance/type.c:112:
+static const char RL_STR_PTRACE_ATTACH[] = "ptrace_attach";                                             // ptrace attach effect on memory

WARNING:LONG_LINE: line over 80 characters
#113: FILE: security/provenance/type.c:113:
+static const char RL_STR_PTRACE_READ[] = "ptrace_read";                                                 // ptrace read from mem

WARNING:LONG_LINE: line over 80 characters
#114: FILE: security/provenance/type.c:114:
+static const char RL_STR_PTRACE_ATTACH_TASK[] = "ptrace_attach_task";                                   // write info via ptrace effect on task

WARNING:LONG_LINE: line over 80 characters
#115: FILE: security/provenance/type.c:115:
+static const char RL_STR_PTRACE_READ_TASK[] = "ptrace_read_task";                                       // read info via ptrace effect on task

WARNING:LONG_LINE: line over 80 characters
#116: FILE: security/provenance/type.c:116:
+static const char RL_STR_PTRACE_TRACEME[] = "ptrace_traceme";                                           // track ptrace_traceme

WARNING:LONG_LINE: line over 80 characters
#117: FILE: security/provenance/type.c:117:
+static const char RL_STR_DERIVED_DISC[] = "derived_disc";                                               // disclosed type

WARNING:LONG_LINE: line over 80 characters
#118: FILE: security/provenance/type.c:118:
+static const char RL_STR_GENERATED_DISC[] = "generated_disc";                                           // disclosed type

WARNING:LONG_LINE: line over 80 characters
#119: FILE: security/provenance/type.c:119:
+static const char RL_STR_USED_DISC[] = "used_disc";                                                     // disclosed type

WARNING:LONG_LINE: line over 80 characters
#120: FILE: security/provenance/type.c:120:
+static const char RL_STR_INFORMED_DISC[] = "informed_disc";                                             // disclosed type

WARNING:LONG_LINE: line over 80 characters
#121: FILE: security/provenance/type.c:121:
+static const char RL_STR_INFLUENCED_DISC[] = "influenced_disc";                                         // disclosed type

WARNING:LONG_LINE: line over 80 characters
#122: FILE: security/provenance/type.c:122:
+static const char RL_STR_ASSOCIATED_DISC[] = "associated_disc";                                         // disclosed type

WARNING:LONG_LINE: line over 80 characters
#135: FILE: security/provenance/type.c:135:
+static const char HK_STR_INODE_ALLOC_SECURITY[] = "security_inode_alloc_security";

WARNING:LONG_LINE: line over 80 characters
#154: FILE: security/provenance/type.c:154:
+static const char HK_STR_FILE_SPLICE_PIPE_TO_PIPE[] = "security_file_splice_pipe_to_pipe";

WARNING:LONG_LINE: line over 80 characters
#165: FILE: security/provenance/type.c:165:
+static const char HK_STR_MSG_MSG_ALLOC_SECURITY[] = "security_msg_msg_alloc_security";

WARNING:LONG_LINE: line over 80 characters
#166: FILE: security/provenance/type.c:166:
+static const char HK_STR_MSG_MSG_FREE_SECURITY[] = "security_msg_msg_free_security";

WARNING:LONG_LINE: line over 80 characters
#182: FILE: security/provenance/type.c:182:
+static const char HK_STR_SOCKET_SENDMSG_ALWAYS[] = "security_socket_sendmsg_always";

WARNING:LONG_LINE: line over 80 characters
#184: FILE: security/provenance/type.c:184:
+static const char HK_STR_SOCKET_RECVMSG_ALWAYS[] = "security_socket_recvmsg_always";

WARNING:LONG_LINE: line over 80 characters
#191: FILE: security/provenance/type.c:191:
+static const char HK_STR_BPRM_COMMITTING_CREDS[] = "security_bprm_committing_creds";

WARNING:LONG_LINE_COMMENT: line over 80 characters
#197: FILE: security/provenance/type.c:197:
+static const char ND_STR_UNKNOWN[] = "unknown";                                 // unkown node type should normally not appear

WARNING:LONG_LINE_COMMENT: line over 80 characters
#198: FILE: security/provenance/type.c:198:
+static const char ND_STR_STR[] = "string";                                      // simple string used for disclosed log

WARNING:LONG_LINE_COMMENT: line over 80 characters
#199: FILE: security/provenance/type.c:199:
+static const char ND_STR_TASK[] = "task";                                       // represent a thread from user space POV

WARNING:LONG_LINE_COMMENT: line over 80 characters
#200: FILE: security/provenance/type.c:200:
+static const char ND_STR_INODE_UNKNOWN[] = "inode_unknown";                     // unknown inode type should normally not appear

WARNING:LONG_LINE_COMMENT: line over 80 characters
#201: FILE: security/provenance/type.c:201:
+static const char ND_STR_INODE_LINK[] = "link";                                 // link

WARNING:LONG_LINE_COMMENT: line over 80 characters
#202: FILE: security/provenance/type.c:202:
+static const char ND_STR_INODE_FILE[] = "file";                                 // standard file

WARNING:LONG_LINE_COMMENT: line over 80 characters
#203: FILE: security/provenance/type.c:203:
+static const char ND_STR_INODE_DIRECTORY[] = "directory";                       // directory

WARNING:LONG_LINE_COMMENT: line over 80 characters
#204: FILE: security/provenance/type.c:204:
+static const char ND_STR_INODE_CHAR[] = "char";                                 // character device

WARNING:LONG_LINE_COMMENT: line over 80 characters
#205: FILE: security/provenance/type.c:205:
+static const char ND_STR_INODE_BLOCK[] = "block";                               // block device

WARNING:LONG_LINE_COMMENT: line over 80 characters
#206: FILE: security/provenance/type.c:206:
+static const char ND_STR_INODE_PIPE[] = "pipe";                                 // pipe

WARNING:LONG_LINE_COMMENT: line over 80 characters
#207: FILE: security/provenance/type.c:207:
+static const char ND_STR_INODE_SOCKET[] = "socket";                             // network socket

WARNING:LONG_LINE_COMMENT: line over 80 characters
#208: FILE: security/provenance/type.c:208:
+static const char ND_STR_MSG[] = "msg";                                         // msg as in IPC message passing

WARNING:LONG_LINE_COMMENT: line over 80 characters
#209: FILE: security/provenance/type.c:209:
+static const char ND_STR_SHM[] = "shm";                                         // shared memory

WARNING:LONG_LINE_COMMENT: line over 80 characters
#210: FILE: security/provenance/type.c:210:
+static const char ND_STR_ADDR[] = "address";                                    // network address

WARNING:LONG_LINE_COMMENT: line over 80 characters
#211: FILE: security/provenance/type.c:211:
+static const char ND_STR_SB[] = "sb";                                           // superblock

WARNING:LONG_LINE_COMMENT: line over 80 characters
#212: FILE: security/provenance/type.c:212:
+static const char ND_STR_PATH[] = "path";                                       // path associated with a file

WARNING:LONG_LINE_COMMENT: line over 80 characters
#213: FILE: security/provenance/type.c:213:
+static const char ND_STR_DISC_ENTITY[] = "disc_entity";                         // descilosed node representing an entity

WARNING:LONG_LINE_COMMENT: line over 80 characters
#214: FILE: security/provenance/type.c:214:
+static const char ND_STR_DISC_ACTIVITY[] = "disc_activity";                     // descilosed node representing an activity

WARNING:LONG_LINE_COMMENT: line over 80 characters
#215: FILE: security/provenance/type.c:215:
+static const char ND_STR_DISC_AGENT[] = "disc_agent";                           // disclosed node representing an agent

WARNING:LONG_LINE_COMMENT: line over 80 characters
#216: FILE: security/provenance/type.c:216:
+static const char ND_STR_MACHINE[] = "machine";                                 // machine representing an agent

WARNING:LONG_LINE_COMMENT: line over 80 characters
#217: FILE: security/provenance/type.c:217:
+static const char ND_STR_PACKET[] = "packet";                                   // network packet

WARNING:LONG_LINE_COMMENT: line over 80 characters
#218: FILE: security/provenance/type.c:218:
+static const char ND_STR_IATTR[] = "iattr";                                     // inode attributes value

WARNING:LONG_LINE_COMMENT: line over 80 characters
#219: FILE: security/provenance/type.c:219:
+static const char ND_STR_XATTR[] = "xattr";                                     // extended attributes value

WARNING:LONG_LINE_COMMENT: line over 80 characters
#220: FILE: security/provenance/type.c:220:
+static const char ND_STR_PCKCNT[] = "packet_content";                           // the content of network packet

WARNING:LONG_LINE_COMMENT: line over 80 characters
#221: FILE: security/provenance/type.c:221:
+static const char ND_STR_ARG[] = "argv";                                        // argument passed to a process

WARNING:LONG_LINE_COMMENT: line over 80 characters
#222: FILE: security/provenance/type.c:222:
+static const char ND_STR_ENV[] = "envp";                                        // environment parameter

WARNING:LONG_LINE_COMMENT: line over 80 characters
#223: FILE: security/provenance/type.c:223:
+static const char ND_STR_PROC[] = "process_memory";                             // process memory

WARNING:LONG_LINE: line over 80 characters
#225: FILE: security/provenance/type.c:225:
+#define MATCH_AND_RETURN(str1, str2, v)    do { if (strcmp(str1, str2) == 0) return v; } while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#225: FILE: security/provenance/type.c:225:
+#define MATCH_AND_RETURN(str1, str2, v)    do { if (strcmp(str1, str2) == 0) return v; } while (0)

WARNING:LONG_LINE: line over 80 characters
#605: FILE: security/provenance/type.c:605:
+	MATCH_AND_RETURN(str, RL_STR_CONNECT_UNIX_STREAM, RL_CONNECT_UNIX_STREAM);

WARNING:LONG_LINE: line over 80 characters
#678: FILE: security/provenance/type.c:678:
+	MATCH_AND_RETURN(str, RL_STR_LOAD_FIRMWARE_PREALLOC_BUFFER, RL_LOAD_FIRMWARE_PREALLOC_BUFFER);

WARNING:LONG_LINE: line over 80 characters
#681: FILE: security/provenance/type.c:681:
+	MATCH_AND_RETURN(str, RL_STR_LOAD_KEXEC_INITRAMFS, RL_LOAD_KEXEC_INITRAMFS);

WARNING:LONG_LINE: line over 80 characters
#707: FILE: security/provenance/type.c:707:
+	MATCH_AND_RETURN(str, HK_STR_INODE_ALLOC_SECURITY, HK_INODE_ALLOC_SECURITY);

WARNING:LONG_LINE: line over 80 characters
#708: FILE: security/provenance/type.c:708:
+	MATCH_AND_RETURN(str, HK_STR_INODE_FREE_SECURITY, HK_INODE_FREE_SECURITY);

WARNING:LONG_LINE: line over 80 characters
#719: FILE: security/provenance/type.c:719:
+	MATCH_AND_RETURN(str, HK_STR_INODE_POST_SETXATTR, HK_INODE_POST_SETXATTR);

WARNING:LONG_LINE: line over 80 characters
#726: FILE: security/provenance/type.c:726:
+	MATCH_AND_RETURN(str, HK_STR_FILE_SPLICE_PIPE_TO_PIPE, HK_FILE_SPLICE_PIPE_TO_PIPE);

WARNING:LONG_LINE: line over 80 characters
#731: FILE: security/provenance/type.c:731:
+	MATCH_AND_RETURN(str, HK_STR_FILE_SEND_SIGIOTASK, HK_FILE_SEND_SIGIOTASK);

WARNING:LONG_LINE: line over 80 characters
#734: FILE: security/provenance/type.c:734:
+	MATCH_AND_RETURN(str, HK_STR_PTRACE_ACCESS_CHECK, HK_PTRACE_ACCESS_CHECK);

WARNING:LONG_LINE: line over 80 characters
#737: FILE: security/provenance/type.c:737:
+	MATCH_AND_RETURN(str, HK_STR_MSG_MSG_ALLOC_SECURITY, HK_MSG_MSG_ALLOC_SECURITY);

WARNING:LONG_LINE: line over 80 characters
#738: FILE: security/provenance/type.c:738:
+	MATCH_AND_RETURN(str, HK_STR_MSG_MSG_FREE_SECURITY, HK_MSG_MSG_FREE_SECURITY);

WARNING:LONG_LINE: line over 80 characters
#754: FILE: security/provenance/type.c:754:
+	MATCH_AND_RETURN(str, HK_STR_SOCKET_SENDMSG_ALWAYS, HK_SOCKET_SENDMSG_ALWAYS);

WARNING:LONG_LINE: line over 80 characters
#756: FILE: security/provenance/type.c:756:
+	MATCH_AND_RETURN(str, HK_STR_SOCKET_RECVMSG_ALWAYS, HK_SOCKET_RECVMSG_ALWAYS);

WARNING:LONG_LINE: line over 80 characters
#758: FILE: security/provenance/type.c:758:
+	MATCH_AND_RETURN(str, HK_STR_SOCKET_SOCK_RCV_SKB, HK_SOCKET_SOCK_RCV_SKB);

WARNING:LONG_LINE: line over 80 characters
#759: FILE: security/provenance/type.c:759:
+	MATCH_AND_RETURN(str, HK_STR_UNIX_STREAM_CONNECT, HK_UNIX_STREAM_CONNECT);

WARNING:LONG_LINE: line over 80 characters
#762: FILE: security/provenance/type.c:762:
+	MATCH_AND_RETURN(str, HK_STR_BPRM_CHECK_SECURITY, HK_BPRM_CHECK_SECURITY);

WARNING:LONG_LINE: line over 80 characters
#763: FILE: security/provenance/type.c:763:
+	MATCH_AND_RETURN(str, HK_STR_BPRM_COMMITTING_CREDS, HK_BPRM_COMMITTING_CREDS);

total: 0 errors, 161 warnings, 863 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

security/provenance/type.c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
