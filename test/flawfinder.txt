Flawfinder version 1.31, (C) 2001-2014 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 169
Examining ./security/provenance/query.c
Examining ./security/provenance/fs.c
Examining ./security/provenance/netfilter.c
Examining ./security/provenance/include/provenance_record.h
Examining ./security/provenance/include/provenance_filter.h
Examining ./security/provenance/include/provenance_ns.h
Examining ./security/provenance/include/provenance_task.h
Examining ./security/provenance/include/provenance_policy.h
Examining ./security/provenance/include/provenance_net.h
Examining ./security/provenance/include/provenance_relay.h
Examining ./security/provenance/include/provenance_inode.h
Examining ./security/provenance/include/provenance_query.h
Examining ./security/provenance/include/provenance.h
Examining ./security/provenance/include/provenance_machine.h
Examining ./security/provenance/machine.c
Examining ./security/provenance/relay.c
Examining ./security/provenance/hooks.c
Examining ./security/provenance/propagate.c
Examining ./security/provenance/type.c

FINAL RESULTS:

./security/provenance/fs.c:211:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/fs.c:458:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/fs.c:559:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/hooks.c:378:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/hooks.c:957:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/hooks.c:983:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:67:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:259:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:345:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:402:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:407:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:410:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_inode.h:466:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_net.h:328:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_net.h:349:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_net.h:351:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_record.h:49:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_record.h:138:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_relay.h:86:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_relay.h:87:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_task.h:502:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/machine.c:20:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/machine.c:33:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/relay.c:266:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/relay.c:306:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
./security/provenance/include/provenance_record.h:211:  [1] (buffer) read:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
./security/provenance/include/provenance_task.h:166:  [1] (buffer) read:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
./security/provenance/include/provenance_task.h:184:  [1] (buffer) read:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
./security/provenance/include/provenance_task.h:186:  [1] (buffer) read:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
./security/provenance/relay.c:244:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and permits
  buffer overflows; there are also incompatible standard definitions of it.
  Check it during installation, or use something else.

ANALYSIS SUMMARY:

Hits = 30
Lines analyzed = 7602 in approximately 0.11 seconds (71472 lines/second)
Physical Source Lines of Code (SLOC) = 4871
Hits@level = [0]   0 [1]   5 [2]  25 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  30 [1+]  30 [2+]  25 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.1589 [1+] 6.1589 [2+] 5.13242 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming for Linux and Unix HOWTO'
(http://www.dwheeler.com/secure-programs) for more information.
